{
  "swagger": "2.0",
  "info": {
    "description": "<h1>Metricool API</h1>\r\n        <p>The base URL for all endpoints is: https://app.metricool.com/api</p>\r\n        <p>All endpoints require authentication. To identify yourself properly, you must include 3 parameters in all calls</p>\r\n        <p>You can add the parameters directly in the request <b>(the only parameter that can be implemented in the header with name X-Mc-Auth is the userToken)</b></p>\r\n        <ul>\r\n        <li><b>userToken:</b> It is a unique authorization code for each user and can be found in the account settings.</li>\r\n        <li><b>userId:</b> the user identifier of your Metricool account.</li>\r\n        <li><b>blogId:</b> It is the identification number of the brand, this number can be easily found from the browser url</li>\r\n        </ul>\r\n        <p>Example of a request so that you can see the integration of the parameters in the request (this specific request allows you to find all the brands of a certain user)</p>\r\n        <p>https://app.metricool.com/api/admin/simpleProfiles?blogId=1234567&amp;userId=1234567&amp;userToken=GFJAFBAKFBAK32BKJBFKSABFKABKJFAKABFJKSDBFAK<p>",
    "version": "2.0.0",
    "title": "Metricool API"
  },
  "host": "app.metricool.com",
  "basePath": "/api",
  "tags": [
    {
      "name": "Admin Service"
    },
    {
      "name": "Coupon Partner Api Service"
    },
    {
      "name": "Customize Report Service"
    },
    {
      "name": "Gif Explorer Service"
    },
    {
      "name": "Linkin Bio Service"
    },
    {
      "name": "Offline Report Service"
    },
    {
      "name": "Payments Rest Service"
    },
    {
      "name": "Ping Service"
    },
    {
      "name": "Planner Service"
    },
    {
      "name": "Profile Settings Service"
    },
    {
      "name": "Stats Service"
    },
    {
      "name": "TikTok WH Service"
    },
    {
      "name": "User Settings Service"
    },
    {
      "name": "Vendasta Rest Service"
    },
    {
      "name": "Webhook Base Api Service"
    },
    {
      "name": "Looker studio connector Api Service"
    },
    {
      "name": "Data Studio Service"
    },
    {
      "name": "Analytics Api Service"
    },
    {
      "name": "Analytics Catalogs ApiService"
    },
    {
      "name": "Bluesky Analytics Service"
    },
    {
      "name": "Competitors Api Service"
    },
    {
      "name": "Competitors Posts Api Service"
    },
    {
      "name": "Facebook Analytics Service"
    },
    {
      "name": "Gbp Analytics Service"
    },
    {
      "name": "Hashtags Tracker Api Service"
    },
    {
      "name": "Instagram Analytics Service"
    },
    {
      "name": "Linkedin Analytics Service"
    },
    {
      "name": "Media Api Service"
    },
    {
      "name": "Smart Links Api Service"
    },
    {
      "name": "Threads Analytics Service"
    },
    {
      "name": "TikTok Analytics Service"
    },
    {
      "name": "Adgroups Api Service"
    },
    {
      "name": "Ads Api Service"
    },
    {
      "name": "Ads Previews Api Service"
    },
    {
      "name": "Campaigns Service"
    },
    {
      "name": "Facebook Ads Account Api Service"
    },
    {
      "name": "Keywords Api Service"
    },
    {
      "name": "Recommendations Api Service"
    },
    {
      "name": "Suggestions Service"
    },
    {
      "name": "Agency Customization Kit Api Service"
    },
    {
      "name": "Agency end-clients Api Service"
    },
    {
      "name": "Agency Users Api Service"
    },
    {
      "name": "Authorization Api Service"
    },
    {
      "name": "Brand Role Collaborators Api Service"
    },
    {
      "name": "Brand Roles Api Service"
    },
    {
      "name": "Oauth Api Service"
    },
    {
      "name": "Backoffice Agencies Rest Services"
    },
    {
      "name": "Backoffice ICS Calendar Rest Services"
    },
    {
      "name": "Chat Api Service"
    },
    {
      "name": "Feature Toggle Service"
    },
    {
      "name": "Conversations Api Service"
    },
    {
      "name": "Inbox Notes Api Service"
    },
    {
      "name": "Inbox Status Change Api Service"
    },
    {
      "name": "Post Comments Api Service"
    },
    {
      "name": "Reviews Api Service"
    },
    {
      "name": "Ai Api Service"
    },
    {
      "name": "Ai Natural Language Scheduling Api Service"
    },
    {
      "name": "Canva integration service"
    },
    {
      "name": "Drive integration service"
    },
    {
      "name": "This endpoint returns the required configuration to embed Metricool in our partners' sites"
    },
    {
      "name": "Customize Report Api Service"
    },
    {
      "name": "Report Api Service"
    },
    {
      "name": "Approval Task Api Service"
    },
    {
      "name": "Best Times Api Service"
    },
    {
      "name": "Boards Api Service"
    },
    {
      "name": "Catalogs Api Service"
    },
    {
      "name": "Counters Api Service"
    },
    {
      "name": "ICS Calendar Rest Services for Metricool calendar (scheduler)"
    },
    {
      "name": "Planner Notifications ApiService"
    },
    {
      "name": "Posts Api Service"
    },
    {
      "name": "Scheduled Post Events Api Service"
    },
    {
      "name": "Scheduled Post Notes Api Service"
    },
    {
      "name": "Library Posts Notes Api Service"
    },
    {
      "name": "Brands Api Service"
    },
    {
      "name": "Connections V2 Api Service"
    },
    {
      "name": "Countries Api Service"
    },
    {
      "name": "Payment Methods Api Service"
    },
    {
      "name": "Subscriptions Api Service"
    },
    {
      "name": "Third Party Apps Api Service"
    },
    {
      "name": "Timezones Api Service"
    },
    {
      "name": "Users Api Service"
    },
    {
      "name": "Users Sing-ups Api Service"
    },
    {
      "name": "Whitelabel Settings Api Service"
    },
    {
      "name": "Legal terms api"
    },
    {
      "name": "User contract events api service"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/admin/max-profiles": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Returns the maximum number of brands for the authenticated user.",
        "description": "",
        "operationId": "getMaxProfiles",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/admin/other-free-connections": {
      "delete": {
        "tags": ["Admin Service"],
        "operationId": "deleteOtherFreeConnections",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/admin/simpleProfiles": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Returns the list of brands of your Metricool account.",
        "description": "",
        "operationId": "getSimpleProfiles",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBlog"
              }
            }
          }
        }
      }
    },
    "/admin/profiles-auth": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Returns the list of brands of your Metricool account.",
        "description": "",
        "operationId": "getAuthenticatedProfiles",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicBlog"
              }
            }
          }
        }
      }
    },
    "/admin/detectwebsite": {
      "get": {
        "tags": ["Admin Service"],
        "operationId": "detectWebsite",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/PublicBlog"
            }
          }
        }
      }
    },
    "/admin/update-label-blog": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Updates the brand label.",
        "description": "",
        "operationId": "updateLabelBlog",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "newName",
            "in": "query",
            "description": "Profile name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/admin/report-logo": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Returns the report logo URL",
        "description": "",
        "operationId": "getUserReportLogo",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/admin/add-profile": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Creates new profile",
        "description": "",
        "operationId": "addProfile",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PublicBlog"
            }
          }
        }
      }
    },
    "/admin/delete-profile": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Remove current brand",
        "description": "",
        "operationId": "deleteProfile",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/admin/restore-profile": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Restore a deleted brand",
        "description": "",
        "operationId": "restoreProfile",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/admin/profile/setproperty": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Update brand property value",
        "description": "",
        "operationId": "setProfileProperty",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "property name",
            "required": false,
            "type": "string"
          },
          {
            "name": "value",
            "in": "query",
            "description": "property value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/admin/profile/getproperty": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Get brand property value",
        "description": "",
        "operationId": "getProfileProperty",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "property name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/admin/blog/profiles": {
      "get": {
        "tags": ["Admin Service"],
        "summary": "Returns a brand picture of your Metricool account.",
        "description": "",
        "operationId": "getBlogProfiles",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/admin/security/migration": {
      "get": {
        "tags": ["Admin Service"],
        "operationId": "migrateAuthentication",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "/partner/stackCoupon": {
      "put": {
        "tags": ["Coupon Partner Api Service"],
        "operationId": "addNewCoupon",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stats/report/updatereportlogo": {
      "post": {
        "tags": ["Customize Report Service"],
        "summary": "Save new logo to be included in the report when no template is selected.",
        "description": "",
        "operationId": "saveReportLogo",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stats/report/deletepicture": {
      "get": {
        "tags": ["Customize Report Service"],
        "summary": "Deletes the report picture logo.",
        "description": "",
        "operationId": "deleteReportPicture",
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/report/savetemplate": {
      "post": {
        "tags": ["Customize Report Service"],
        "summary": "Saves the report template.",
        "description": "",
        "operationId": "saveReportTemplateParam",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/report/deletetemplate": {
      "get": {
        "tags": ["Customize Report Service"],
        "summary": "Delete template and update delete value to 1.",
        "description": "",
        "operationId": "deleteTemplateUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/report/duplicatetemplate": {
      "get": {
        "tags": ["Customize Report Service"],
        "summary": "Duplicate a template with another name.",
        "description": "",
        "operationId": "duplicateTemplateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "description": "The id of the template you want to duplicate",
            "required": false,
            "type": "string"
          },
          {
            "name": "templateName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TemplateReport"
            }
          }
        }
      }
    },
    "/stats/report/reporttemplateName": {
      "get": {
        "tags": ["Customize Report Service"],
        "summary": "Returns all report templates of a user.",
        "description": "",
        "operationId": "getReportTemplateUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TemplateReport"
              }
            }
          }
        }
      }
    },
    "/stats/report/reporttemplateparam": {
      "get": {
        "tags": ["Customize Report Service"],
        "summary": "Returns all parameters of a specific template",
        "description": "",
        "operationId": "getReportTemplateParam",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "description": "report template id",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/stats/report/template/default-resources": {
      "get": {
        "tags": ["Customize Report Service"],
        "operationId": "getDefaultTemplateResources",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/gifs/search": {
      "get": {
        "tags": ["Gif Explorer Service"],
        "summary": "Search gifs. When query is blank returns trendings",
        "description": "",
        "operationId": "search",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Term to search",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset to implement navigation",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of images to return",
            "required": false,
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "format": "int32"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "language for regional content; use a 2-letter ISO 639-1 language code. By default, your metricool account language will",
            "required": false,
            "type": "string"
          },
          {
            "name": "rating",
            "in": "query",
            "description": "rating GIF and Sticker library is thoroughly moderated and organized by rating. By default g is used \r\n g: Contains images that are broadly accepted as appropriate and commonly witnessed by people in a public environment. \r\n pg: Contains images that are commonly witnessed in a public environment, but not as broadly accepted as appropriate. \r\n pg-13: Contains images that are typically not seen unless sought out, but still commonly witnessed \r\n r:Contains images that are typically not seen unless sought out and could be considered alarming if witnessed",
            "required": false,
            "type": "string",
            "default": "g"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          }
        }
      }
    },
    "/linkinbio/instagram/getbiocatalog": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Returns Instagram BIO link contents",
        "description": "",
        "operationId": "getInstagramBioCatalog",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramBioCatalog"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/getbioButtons": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Returns Instagram BIO link contents",
        "description": "",
        "operationId": "getInstagramButtonsBioCatalog",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/deletecatalogimage": {
      "delete": {
        "tags": ["Linkin Bio Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "deleteCatalogImage",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to delete",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramBioCatalog"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/deletecatalogitem": {
      "delete": {
        "tags": ["Linkin Bio Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "deleteCatalogItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to delete",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/updateButtonPosition": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "updateButtonPosition",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to delete",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/editcatalogitem": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "editCatalogItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to update",
            "required": false,
            "type": "integer"
          },
          {
            "name": "link",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramBioCatalog"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/editcatalogbutton": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Update button link and text in Instagram BIO link",
        "description": "",
        "operationId": "editCatalogButton",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to update",
            "required": false,
            "type": "integer"
          },
          {
            "name": "link",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "new text description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/addcatalogitems": {
      "post": {
        "tags": ["Linkin Bio Service"],
        "summary": "Add one or more pictures to Instagram BIO link",
        "description": "",
        "operationId": "addCatalogItems",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "picture",
            "in": "query",
            "description": "The most recent post Id (only for Instagram personal accounts)",
            "required": false,
            "type": "string"
          },
          {
            "name": "igid",
            "in": "query",
            "description": "Instagram post identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Unix timestamp in milis",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramBioCatalog"
              }
            }
          }
        }
      }
    },
    "/linkinbio/instagram/addcatalogButton": {
      "get": {
        "tags": ["Linkin Bio Service"],
        "summary": "Add button to Instagram BIO link",
        "description": "",
        "operationId": "addCatalogButton",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "textButton",
            "in": "query",
            "description": "button text",
            "required": false,
            "type": "string"
          },
          {
            "name": "link",
            "in": "query",
            "description": "button Link",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/mtr/ping": {
      "get": {
        "tags": ["Ping Service"],
        "operationId": "pong",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/actions/setTimeZone": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Define the user timezone.",
        "description": "",
        "operationId": "setTimeZone",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "timezone",
            "in": "query",
            "description": "time zone --> Europe/Berlin or Europe/Paris ",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/actions/normalize/image/url": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Validates that the URL is publicly accessible and transforms it into a URL from a metricool repository",
        "description": "",
        "operationId": "getNormalizedImageUrl",
        "produces": ["text/plain"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/actions/instagram/required-scopes-to-post": {
      "get": {
        "tags": ["Planner Service"],
        "operationId": "requiredInstagramScopesToPublish",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/actions/instagram/auto-candidate-posts-count-for-automation": {
      "get": {
        "tags": ["Planner Service"],
        "operationId": "getCandidatePostCountForAutomation",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/actions/instagram/auto-candidate-posts-for-automation": {
      "post": {
        "tags": ["Planner Service"],
        "operationId": "setCandidatePostForAutomation",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "/actions/facebook/search-location": {
      "get": {
        "tags": ["Planner Service"],
        "operationId": "getLocations",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacebookLocation"
              }
            }
          }
        }
      }
    },
    "/actions/twitter/suggestions": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Returns a list of suggestions of twitter accounts.",
        "description": "",
        "operationId": "getTwitterSuggestions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Text entered in the search field",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitterEvent"
              }
            }
          }
        }
      }
    },
    "/actions/bluesky/suggestions": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Returns a list of suggestions of Bluesky accounts.",
        "description": "",
        "operationId": "getBlueskySuggestions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Text entered in the search field",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitterEvent"
              }
            }
          }
        }
      }
    },
    "/actions/facebook/suggestions": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Returns a list of suggestions of facebook accounts.",
        "description": "",
        "operationId": "getFacebookSuggestions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Text entered in the search field",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitterEvent"
              }
            }
          }
        }
      }
    },
    "/actions/instagram/suggestions/hashtags": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Returns a list of suggestions of instagram hashtags.",
        "description": "",
        "operationId": "getInstagramHashtagsSuggestions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Text entered in the search field",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/actions/linkedin/suggestions": {
      "get": {
        "tags": ["Planner Service"],
        "summary": "Returns a list of suggestions of linkedIn companies.",
        "description": "",
        "operationId": "getLinkedInSuggestions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Text entered in the search field",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitterEvent"
              }
            }
          }
        }
      }
    },
    "/actions/csv/table": {
      "post": {
        "tags": ["Planner Service"],
        "operationId": "getCSVTable",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CalendarCSVRow"
              }
            }
          }
        }
      }
    },
    "/profile/report/sections": {
      "get": {
        "tags": ["Profile Settings Service"],
        "operationId": "getUserReportSections",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UserSettingsReportSections"
            }
          }
        }
      }
    },
    "/profile/lastsyncs": {
      "get": {
        "tags": ["Profile Settings Service"],
        "operationId": "getLastSyncs",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/profile/subscription": {
      "get": {
        "tags": ["Profile Settings Service"],
        "operationId": "getUserSubscription",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        }
      }
    },
    "/profile/timezone": {
      "post": {
        "tags": ["Profile Settings Service"],
        "operationId": "setBrandTimezone",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stats/values/{category}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns metrics values for a concrete day and filtered by category",
        "description": "",
        "operationId": "getValues",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "Supported values: fbAdsPerformance, adwordsPerformance, BestTimeTweet, FacebookAds, Facebook, Linkedin, Contents, instagram, Twitter, BestTimeIG, Audience",
            "required": true,
            "type": "string"
          },
          {
            "name": "date",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/stats/twitter/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns tweets list with metrics for the period",
        "description": "",
        "operationId": "getTweets",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created, favorites, retweets, linkClicks)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tweet"
              }
            }
          }
        }
      }
    },
    "/stats/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns website posts published during the period",
        "description": "",
        "operationId": "getPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PublicPost"
              }
            }
          }
        }
      }
    },
    "/stats/timeline/{metric}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns time serie values for a concrete metric during a period of time",
        "description": "",
        "operationId": "getTimeLine",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "metric",
            "in": "path",
            "description": "Supported values: \r\n     For Website: Visitors, PageViews, SessionsCount \r\n     For Blog: DailyComments, DailyPosts \r\n     For Twitter: twitterFollowers, twTweets, 2ndLevelFollowers, LastDayActiveFollowers, LastMonthActiveFollowers, twFavorites, twFriends, twListed, twMentions, twRetweets, follows, unfollows\r\n     For Facebook pages: facebookLikes, fbPosts, dailyImpressions, dailyImpressionsUnique, dailyReactions, dailyClicks, dailyShares, dailyComments, pageImpressions, pageViews, fbFollows, fbUnfollows, ctaClicks, callPhoneClicks, getDirectionsClicks, \r\n     For Facebook groups: fb_group_members, fb_group_members_req, fbGroupsPosts, fbGroupsEngagement, fbGroupsInteractions, fbGroupsReactions, fbGroupsComments\r\n     For Instagram: igFollowers, igFollowing, igDeltaFollowers, igPosts, igLikes, igComments, igEngagement, igSaved, igInteractions, igimpressions, igreach, igprofile_views, igwebsite_clicks, igPostsImpressions, igPostsReach, igStoriesImpressions, igStoriesReach, igStoriesCount\r\n     For LinkedIn: inFollowers, inPaidFollowers, inCompanyImpressions, inPosts, inCliks, inPostsLikes, inComments\r\n     For Facebook Ads: clicks, total_action_value, cpc, cpm, cpp, ctr, impressions, reach, spend, unique_clicks, unique_ctr\r\n     For Youtube: ytviewerPercentage, yttotalComments, yttotalViews, yttotalVideos, yttotalSubscribers, yttotalLikes, yttotalDislikes, yttotalFavorites, ytsubscribersGained, ytsubscribersLost, ytviews, ytestimatedRevenue, ytestimatedMinutesWatched, ytaverageViewDuration, ytlikes, ytdislikes, ytcomments, ytshares, ytestimatedRedPartnerRevenue, ytadImpressions, ytmonetizedPlaybacks",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/stats/aggregation/{metric}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Engagement metric aggregated value for a period of time",
        "description": "",
        "operationId": "getAggregation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "metric",
            "in": "path",
            "description": "Supported values: igEngagement, affiliationEarned, fbPostsReach, igPostsReach, igStoriesReach, fbDailyEngagement and pinterestEngagement",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "igcompetitorid",
            "in": "query",
            "description": "(Optional) to get Instagram engagement for a competitor",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    },
    "/stats/aggregations/{category}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns a list of metrics agregated for a period of time filtered by category",
        "description": "",
        "operationId": "getAggregations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "description": "Supported values: fbAdsPerformance, adwordsPerformance, BestTimeTweet, FacebookAds, Facebook, Linkedin, Contents, instagram, Twitter, BestTimeIG, Audience",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaignid",
            "in": "query",
            "description": "(Optional) Only for fbAdsPerformance, adwordsPerformance",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      }
    },
    "/stats/distribution/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns website visits distribution during the period",
        "description": "",
        "operationId": "getGeoDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Supported values: country, referers, sources",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/stats/twEvents/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns twitter account that start following and stop following during the period",
        "description": "",
        "operationId": "getTwitterEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Supported values: follows, unfollows",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitterEvent"
              }
            }
          }
        }
      }
    },
    "/stats/rt/values": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns page views, visits and visitors for today for the website and people reading right now",
        "description": "",
        "operationId": "getRTValues",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/stats/rt/pvperhour": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns page views per hour distribution for a website in real time",
        "description": "",
        "operationId": "getRTPageViewsPerHour",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/stats/rt/sessions": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns real time visit list for a website",
        "description": "",
        "operationId": "getRTSessions",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VisitorSessionList"
            }
          }
        }
      }
    },
    "/stats/rt/distribution/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns real time visits distribution for the website",
        "description": "",
        "operationId": "getRTDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Values: referers, countries, sources, currentpageviews",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/stats/rt/twitter/tweets/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getLastTweets",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "screenname",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "description": "Supported values: tweets, mentions",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tweet"
              }
            }
          }
        }
      }
    },
    "/stats/rt/twitterProfile": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getTwitterProfile",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/TwitterProfile"
            }
          }
        }
      }
    },
    "/stats/instagram/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Instagram post list with metrics for the period",
        "description": "",
        "operationId": "statsServiceGetInstagramPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (published, likes, comments, filter, engagement, interactions, clicks, type, owner, impressions, reach, saved, videoviews)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramPost"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/stats/instagram/reels": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Instagram reel list with metrics for the period",
        "description": "",
        "operationId": "statsServiceGetInstagramReels",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (published, likes, comments, filter, engagement, interactions, clicks, type, owner, impressions, reach, saved, videoviews)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramReel"
              }
            }
          }
        }
      }
    },
    "/stats/instagram/stories": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Instagram stories list with metrics for the period",
        "description": "",
        "operationId": "statsServiceGetInstagramStories",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (published, exits, impressions, reach, replies, tapsForward, tapsBack)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramStory"
              }
            }
          }
        }
      }
    },
    "/stats/{provider}/posts/types": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns tweets grouped by type",
        "description": "",
        "operationId": "getTweetsTypes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Social media network (twitter, facebook, instagram...)",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/stats/gender/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns followers distribution by gender",
        "description": "",
        "operationId": "getComunityGenderDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: facebook, instagram",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Number"
              }
            }
          }
        }
      }
    },
    "/stats/gender-age/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns followers distribution by gender and age",
        "description": "",
        "operationId": "getComunityGenderAgeDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: facebook, instagram",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GenderAgeDistribution"
              }
            }
          }
        }
      }
    },
    "/stats/trafficsource/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getCommunityTrafficSourceDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      }
    },
    "/stats/twitch/videos": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns twitch videos with metrics for the period",
        "description": "",
        "operationId": "getTwitchVideos",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitchVideo"
              }
            }
          }
        }
      }
    },
    "/stats/twitch/clips": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns twitch clips from a specific video",
        "description": "",
        "operationId": "getTwitchClips",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitchClip"
              }
            }
          }
        }
      }
    },
    "/stats/twitch/video/clips": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns  clips from a twitch channel",
        "description": "",
        "operationId": "getTwitchClipsByVideo",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitchClip"
              }
            }
          }
        }
      }
    },
    "/stats/twitch/subscriptions": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns  subscriptions twitch channel",
        "description": "",
        "operationId": "getTwitchSubscriptions",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (date)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TwitchSubscription"
              }
            }
          }
        }
      }
    },
    "/stats/twitch/subscriptions/doughnut": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns subscribers distribution by type",
        "description": "",
        "operationId": "getSubscriptionsDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Number"
              }
            }
          }
        }
      }
    },
    "/stats/tiktokads/campaigns": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns TikTok campaigns with metrics for the period",
        "description": "",
        "operationId": "getTikTokCampaigns",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdCampaign"
              }
            }
          }
        }
      }
    },
    "/stats/age/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns followers distribution by age",
        "description": "",
        "operationId": "getComunityAgeDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: facebook, instagram",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Number"
              }
            }
          }
        }
      }
    },
    "/stats/postmessage/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Post a a message or a comment in response to anothere",
        "description": "",
        "operationId": "getPostMessage",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: fbMessenger, fbComments, igComments, twitterDM",
            "required": true,
            "type": "string"
          },
          {
            "name": "conversationid",
            "in": "query",
            "description": "Message or comment to respond",
            "required": false,
            "type": "string"
          },
          {
            "name": "text",
            "in": "query",
            "description": "Text to publish",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/deletecomment/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Delete a Facebook comment",
        "description": "",
        "operationId": "getDeleteComment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: fbComments",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentid",
            "in": "query",
            "description": "Facebook comment id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/postlike/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Switch like (like or unlike) a Facebook comment",
        "description": "",
        "operationId": "getPostLike",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: fbComments",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectid",
            "in": "query",
            "description": "Facebook comment id",
            "required": false,
            "type": "string"
          },
          {
            "name": "isLiked",
            "in": "query",
            "description": "true, if you want to remove the like",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/country/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns followers distribution by country",
        "description": "",
        "operationId": "getComunityCountryDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: facebook, instagram, tiktok, youtube",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Number"
              }
            }
          }
        }
      }
    },
    "/stats/city/{provider}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns followers distribution by city",
        "description": "",
        "operationId": "getComunityCityDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Supported values: facebook, instagram",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Number"
              }
            }
          }
        }
      }
    },
    "/stats/twitter/follow": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Follow twitter account",
        "description": "",
        "operationId": "followTwitter",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "twitter user id",
            "required": false,
            "type": "string"
          },
          {
            "name": "screenname",
            "in": "query",
            "description": "twitter screen name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/twitter/unfollow": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Unfollow twitter account",
        "description": "",
        "operationId": "unfollowTwitter",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "twitter user id",
            "required": false,
            "type": "string"
          },
          {
            "name": "screenname",
            "in": "query",
            "description": "twitter screen name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/facebook/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Facebook page posts list with metrics for the period",
        "description": "",
        "operationId": "statsServiceGetFacebookPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (reactions, engagement, shares, impressions, impressionsUnique, clicks, linkclicks, comments, videoViews, videoTimeWatched)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacebookPost"
              }
            }
          }
        }
      }
    },
    "/stats/fbgroup/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Facebook group posts list with metrics for the period",
        "description": "",
        "operationId": "getFacebookGroupPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (reactions, engagement, comments)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FacebookPost"
              }
            }
          }
        }
      }
    },
    "/stats/linkedin/posts": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns LinkedIn posts list with metrics for the period",
        "description": "",
        "operationId": "getLinkedinPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (likes, clicks, impressions, engagement, comments)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinkedinPost"
              }
            }
          }
        }
      }
    },
    "/stats/linkedin/stories": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns LinkedIn stories list with metrics for the period",
        "description": "",
        "operationId": "getLinkedinStories",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (likes, clicks, impressions, engagement, comments)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LinkedinPost"
              }
            }
          }
        }
      }
    },
    "/stats/facebookads/campaigns": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Facebook Ads campaigns list with metrics for the period",
        "description": "",
        "operationId": "getFacebookAdsCampaings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (name, objective, created, updated, impressions, reach, conversions, clicks, start, cpm, cpc, ctr, spent)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdCampaign"
              }
            }
          }
        }
      }
    },
    "/stats/adwords/campaigns": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Google Ads campaigns list with metrics for the period",
        "description": "",
        "operationId": "getAdwordsCampaings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (impressions, start, cpm, cpc, ctr, cost)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdCampaign"
              }
            }
          }
        }
      }
    },
    "/stats/adwords/keywords": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Google Ads keywords list with metrics for the period",
        "description": "",
        "operationId": "getAdwordsKeywords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (impressions, start, cpm, cpc, ctr, cost)",
            "required": false,
            "type": "string"
          },
          {
            "name": "CAMPAIGN",
            "in": "query",
            "description": "(optional) campaign identifier to filter",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdsKeyword"
              }
            }
          }
        }
      }
    },
    "/stats/ads": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getAdwordsAds",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Ad"
              }
            }
          }
        }
      }
    },
    "/stats/facebookads/metricvalue": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Facebook Ads metric value",
        "description": "",
        "operationId": "getFacebookAdsMetricValue",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "metric",
            "in": "query",
            "description": "metric name",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Format: YYYYMMDD",
            "required": false,
            "type": "integer"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone to use for the date range",
            "required": false,
            "type": "string"
          },
          {
            "name": "idCampaign",
            "in": "query",
            "description": "(optional) only to filter for a campaign",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    },
    "/stats/link/distribution/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getLinkDistribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "supported values: twFollowers, facebook, instagram",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/stats/instagram/getbiocatalog": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Instagram BIO link contents (catalog)",
        "description": "",
        "operationId": "statsServiceGetInstagramBioCatalog",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramBioCatalog"
              }
            }
          }
        }
      }
    },
    "/stats/instagram/getbioButtons": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Instagram BIO link contents",
        "description": "",
        "operationId": "statsServiceGetInstagramButtonsBioCatalog",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InstagramLinkTree"
              }
            }
          }
        }
      }
    },
    "/stats/instagram/deletecatalogitem": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "statsServiceDeleteCatalogItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to delete",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/updateButtonPosition": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Delete item from Instagram BIO link",
        "description": "",
        "operationId": "statsServiceUpdateButtonPosition",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to delete",
            "required": false,
            "type": "integer"
          },
          {
            "name": "itemposition",
            "in": "query",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/editcatalogitem": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Update picture link in Instagram BIO link",
        "description": "",
        "operationId": "statsServiceEditCatalogItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to update",
            "required": false,
            "type": "integer"
          },
          {
            "name": "link",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/editcatalogbutton": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Update button link and text in Instagram BIO link",
        "description": "",
        "operationId": "statsServiceEditCatalogButton",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to update",
            "required": false,
            "type": "integer"
          },
          {
            "name": "link",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          },
          {
            "name": "textButton",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/editcoloritem": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Update button color in Instagram BIO link",
        "description": "",
        "operationId": "editColorItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "itemid",
            "in": "query",
            "description": "item id to update",
            "required": false,
            "type": "integer"
          },
          {
            "name": "link",
            "in": "query",
            "description": "new link URL",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/addcatalogitem": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Add picture to Instagram BIO link",
        "description": "",
        "operationId": "addCatalogItem",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "picture",
            "in": "query",
            "description": "The most recent post Id (only for Instagram personal accounts)e",
            "required": false,
            "type": "string"
          },
          {
            "name": "igid",
            "in": "query",
            "description": "Instagram post identifier",
            "required": false,
            "type": "string"
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "Unix timestamp in milis",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/instagram/addcatalogButton": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Add button to Instagram BIO link",
        "description": "",
        "operationId": "statsServiceAddCatalogButton",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "igid",
            "in": "query",
            "description": "button text",
            "required": false,
            "type": "string"
          },
          {
            "name": "link",
            "in": "query",
            "description": "button Link",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/stats/facebook/boost/{postId}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Creates a paid campaign for a published Facebook post",
        "description": "",
        "operationId": "boostFacebookPost",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "published Facebook post id (Facebook identifier)",
            "required": true,
            "type": "string"
          },
          {
            "name": "budget",
            "in": "query",
            "description": "new budget to boost",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/facebook/boost/pending/{postId}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Add the boost budget for a programmed Facebook post for first time.",
        "description": "",
        "operationId": "boostFacebookPostPending",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "description": "published Facebook post id (Facebook identifier)",
            "required": true,
            "type": "string"
          },
          {
            "name": "budget",
            "in": "query",
            "description": "new budget to boost",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/facebook/getvalue": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns the boost budget for a programmed Facebook post.",
        "description": "",
        "operationId": "boostFacebookGetValue",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "description": "published Facebook post id (Facebook identifier)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/stats/gmb/review": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Gmb review list with metrics for the period",
        "description": "",
        "operationId": "getGmbReviews",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created, saves, comments)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GmbReview"
              }
            }
          }
        }
      }
    },
    "/stats/gmb/reviewbyid": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns a GMB review  from API",
        "description": "",
        "operationId": "getGmbReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reviewname",
            "in": "query",
            "description": "id of a review",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GmbReview"
            }
          }
        }
      }
    },
    "/stats/gmb/media/{type}": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Returns Gmb review list with metrics for the period",
        "description": "",
        "operationId": "getGmbMedia",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "period start (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "end",
            "in": "query",
            "description": "period end (YYYYMMDD)",
            "required": false,
            "type": "integer"
          },
          {
            "name": "sortcolumn",
            "in": "query",
            "description": "column to sort (created, saves, comments)",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GmbMedia"
              }
            }
          }
        }
      }
    },
    "/stats/gmb/review/reply": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Reply a GMB review",
        "description": "",
        "operationId": "replyReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reviewname",
            "in": "query",
            "description": "id of a review (String)",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": " text of a review (String)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/stats/gmb/review/reply/remove": {
      "get": {
        "tags": ["Stats Service"],
        "summary": "Deletes a GMB review reply",
        "description": "",
        "operationId": "deleteReplyReview",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reviewname",
            "in": "query",
            "description": "id of a review (String)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/stats/facebookads/adgroups/customeventtype": {
      "get": {
        "tags": ["Stats Service"],
        "operationId": "getAdGroupCustomEventType",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/tiktok/webhook": {
      "post": {
        "tags": ["TikTok WH Service"],
        "operationId": "event",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user/settings": {
      "get": {
        "tags": ["User Settings Service"],
        "operationId": "getUserSettings",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/UserSettings"
            }
          }
        }
      }
    },
    "/user/unlock": {
      "post": {
        "tags": ["User Settings Service"],
        "operationId": "unlockUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/mktp/session": {
      "post": {
        "tags": ["Vendasta Rest Service"],
        "operationId": "session",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/SessionToken"
            }
          }
        }
      }
    },
    "/mktp/purchase": {
      "get": {
        "tags": ["Vendasta Rest Service"],
        "operationId": "purchaseGET",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": ["Vendasta Rest Service"],
        "operationId": "purchasePOST",
        "consumes": ["*/*"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/webhooks/{provider}/catch-all": {
      "get": {
        "tags": ["Webhook Base Api Service"],
        "operationId": "verifyWebhookSubscription",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": ["Webhook Base Api Service"],
        "operationId": "catchAllEvents",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/datastudio/datasets": {
      "get": {
        "tags": ["Looker studio connector Api Service"],
        "summary": "Return requested looker studio field values",
        "description": "",
        "operationId": "getTable",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatasetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Looker studio connector Api Service"],
        "summary": "Return requested looker studio field values",
        "description": "",
        "operationId": "getTableWithPOST",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DatasetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/datastudio/fbads/ads": {
      "get": {
        "tags": ["Data Studio Service"],
        "operationId": "getFacebookAds",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStudioAd"
              }
            }
          }
        }
      }
    },
    "/datastudio/tiktokads/ads": {
      "get": {
        "tags": ["Data Studio Service"],
        "operationId": "getTikTokAds",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataStudioAd"
              }
            }
          }
        }
      }
    },
    "/v2/analytics/timelines": {
      "get": {
        "tags": ["Analytics Api Service"],
        "summary": "Returns a time series for a concrete metric during a period of time",
        "description": "",
        "operationId": "timeline",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "description": "network Supported values: <ul>\r\n<li>tiktok</li>\r\n<li>pinterest</li>\r\n<li>youtube</li>\r\n<li>facebook</li>\r\n<li>gmb</li>\r\n<li>instagram</li>\r\n<li>linkedin</li>\r\n</ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "description": "metric Supported values: Metrics are case insensitive<ul>\r\n<li>For TikTok Videos: videos, views, comments, shares, interactions, likes, reach, engagement, impressionSources, averageVideoViews</li>\r\n<li>For TikTok Account: video_views, profile_views, followers_count, followers_delta_count, likes, comments, shares</li>\r\n<li>For Pinterest: impression save pin_click outbound_click video_mrc_view video_avg_watch_time video_v50_watch_time quartile_95_percent_view pins</li>\r\n<li>For Pinterest (accounts): followers, following, delta followers</li>\r\n<li>For Youtube: views, interactions, likes, dislikes, comments, shares </li>\r\n<li>For Facebook (metrics for stories): storiesCount\r\n<li>For Facebook (metrics for posts): count, interactions, engagement, impressionsunique, impressions, clicks, comments, shares, reactions\r\n<li>For Facebook (metrics for reels): blue_reels_play_count, post_impressions_unique, post_video_likes_by_reaction_type, post_video_social_actions, engagement, count </li>\r\n<li>For Facebook (account metrics): page_posts_impressions, page_actions_post_reactions_total, postsCount, postsInteractions, likes, pageFollows, pageImpressions, pageImpressions.M, pageImpressions.F, pageImpressions.U, pageImpressions.13-17, pageImpressions.18-24, pageImpressions.25-34, pageImpressions.35-44, pageImpressions.45-54, pageImpressions.55-64, pageImpressions.65+, pageViews, page_daily_follows_unique, page_daily_unfollows_unique</li>\r\n<li>For GMB: business_impressions_maps, business_impressions_search, business_impressions_total, business_direction_requests, call_clicks, website_clicks, clicks_total, business_conversations, business_bookings, business_food_orders, business_actions_total</li>\r\n<li>For Instagram (account metrics): email_contacts, get_directions_clicks, phone_call_clicks, text_message_clicks, clicks_total, postsCount, postsInteractions</li>\r\n<li>For Instagram (posts metrics): count, interactions, engagement, reach, impressions, likes, comments, saves, shares</li>\r\n<li>For Instagram (reels metrics): count, comments, likes, saved, shares, engagement, impressions, reach, interactions, videoviews</li>\r\n<li>For Linkedin (account metrics [company]): followers, paidFollowers, companyImpressions, deltaFollowers, impressionCount, shareCount, clickCount, likeCount, commentCount, postsCount</li>\r\n<li>For Linkedin (posts metrics [company]): posts, clicks, likes, comments, shares, engagement, impressions, interactions</li>\r\n<li>For Linkedin (newsletters metrics [company]): posts, clicks, likes, comments, shares, engagement, impressions, interactions</li>\r\n<li>For Linkedin (account metrics [personal]): followers, deltaFollowers, reaction, comment, reshare, impression</li>\r\n<li>For Linkedin (posts metrics [personal]): count, comment, reshare, impression, reaction, engagement, interactions</li>\r\n<li>For Threads (posts metrics): count, views, likes, replies, reposts, engagement, quotes, interactions</li>\r\n<li>For Bluesky (posts metrics): posts_count, interactions, likes, replies, reposts, quotes</li>\r\n</ul>",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00+01:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From Date and time in ISO 8601 format. e.g. 2021-09-10T03:30:00+01:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Is a filter when we retrieve data. Some examples: 'posts', 'reels', 'account'. Each network defines its own 'subjects'",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "description": "Is a second filter. Some examples: 'viewed', 'published'. Now its only used for Youtube",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseTimelineSeries"
            }
          }
        }
      }
    },
    "/v2/analytics/hashtags": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "getPopularHashtags",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseHashtag"
            }
          }
        }
      }
    },
    "/v2/analytics/distribution": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "distribution",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseDistributionItem"
            }
          }
        }
      }
    },
    "/v2/analytics/aggregation": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "aggregation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseDouble"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/pinterest": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "getPins",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponsePin"
            }
          }
        }
      }
    },
    "/v2/analytics/brand-summary/posts": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "getBrandSummaryPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBrandSummaryPost"
            }
          }
        }
      }
    },
    "/v2/analytics/campaigns/tiktokads": {
      "get": {
        "tags": ["Analytics Api Service"],
        "operationId": "getTiktokAdsCampaigns",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "metrics[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCampaign"
            }
          }
        }
      }
    },
    "/v2/analytics/catalogs/{network}/scopes": {
      "get": {
        "tags": ["Analytics Catalogs ApiService"],
        "operationId": "verifyScopes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseCollectionString"
            }
          }
        }
      }
    },
    "/v2/analytics/catalogs/accounts/youtube": {
      "get": {
        "tags": ["Analytics Catalogs ApiService"],
        "operationId": "getYoutubeAccountsByHandle",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "handle",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseYoutubeCompetitor"
            }
          }
        }
      }
    },
    "/v2/analytics/catalogs/accounts/bluesky": {
      "get": {
        "tags": ["Analytics Catalogs ApiService"],
        "operationId": "getBlueskyAccountsByHandle",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "handle",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBlueskyCompetitor"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/bluesky": {
      "get": {
        "tags": ["Bluesky Analytics Service"],
        "summary": "Returns the list of bluesky posts published during a period of time.",
        "description": "",
        "operationId": "getPosts_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBlueskyPost"
            }
          }
        }
      }
    },
    "/v2/analytics/bluesky/events/{type}": {
      "get": {
        "tags": ["Bluesky Analytics Service"],
        "summary": "Returns the list of bluesky accounts that follows and unfollows the main account.",
        "description": "",
        "operationId": "getBlueskyEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagesize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlueskyEvent"
              }
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/{competitorId}/timelines": {
      "get": {
        "tags": ["Competitors Api Service"],
        "summary": "Returns a time series for a concrete metric during a period of time",
        "description": "",
        "operationId": "timeline_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseTimelineSeries"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/{network}": {
      "get": {
        "tags": ["Competitors Api Service"],
        "operationId": "getCompetitors",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInfluencer"
            }
          }
        }
      },
      "post": {
        "tags": ["Competitors Api Service"],
        "operationId": "addCompetitor",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      },
      "delete": {
        "tags": ["Competitors Api Service"],
        "operationId": "removeCompetitor",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "competitorId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/{network}/{competitorId}": {
      "patch": {
        "tags": ["Competitors Api Service"],
        "operationId": "setFavorite",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Influencer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseInfluencer"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/instagram/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get posts of a IG competitor of a brand",
        "description": "",
        "operationId": "getInstagramCompetitorPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "description": "Competitor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From To",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramCompetitorMedia"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/instagram/{competitorId}/reels": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get reels of a IG competitor of a brand",
        "description": "",
        "operationId": "getInstagramCompetitorReels",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "description": "Competitor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From To",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramCompetitorMedia"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/twitter/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get tweets of all competitors of a brand",
        "description": "",
        "operationId": "getTwitterCompetitorPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "description": "Competitor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCompetitorTweet"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/facebook/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get posts of a FB competitor of a brand",
        "description": "",
        "operationId": "getFacebookCompetitorPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "description": "Competitor identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From To",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookCompetitorPost"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/twitter/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get tweets of all competitors of a brand",
        "description": "",
        "operationId": "getBrandTwitterCompetitorsPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "description": "(Optional) Competitor id list to filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCompetitorTweet"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/facebook/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get posts of all FB competitors of a brand",
        "description": "",
        "operationId": "getBrandFacebookCompetitorsPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From To",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "description": "(Optional) Competitor id list to filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookCompetitorPost"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/instagram/publications": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "summary": "Get publications (POSTS+REELS) of all IG competitors of a brand",
        "description": "",
        "operationId": "getBrandInstagramCompetitorsPublications",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "From To",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "timezone",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "number of posts to return (max of 5000 tweets).",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "description": "(Optional) Competitor id list to filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramCompetitorMedia"
            }
          },
          "404": {
            "description": "not found"
          }
        }
      }
    },
    "/v2/analytics/competitors/twitch/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getBrandTwitchCompetitorsPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCompetitorTwitchVideo"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/twitch/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getTwitchCompetitorPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCompetitorTwitchVideo"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/twitch/{competitorId}/clips": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getTwitchCompetitorClips",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCompetitorTwitchClip"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/youtube/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getBrandYoutubeCompetitorsPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseYouTubeCompetitorVideo"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/youtube/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getYoutubeCompetitorPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseYouTubeCompetitorVideo"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/bluesky/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getBlueskyCompetitorsPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "competitors[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBlueskyCompetitorPost"
            }
          }
        }
      }
    },
    "/v2/analytics/competitors/bluesky/{competitorId}/posts": {
      "get": {
        "tags": ["Competitors Posts Api Service"],
        "operationId": "getBlueskyCompetitorPostsByCompetitorId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "competitorId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBlueskyCompetitorPost"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/facebook": {
      "get": {
        "tags": ["Facebook Analytics Service"],
        "summary": "Returns the list of Facebook posts created during a period of time.",
        "description": "",
        "operationId": "getFacebookPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookPost"
            }
          }
        }
      }
    },
    "/v2/analytics/reels/facebook": {
      "get": {
        "tags": ["Facebook Analytics Service"],
        "summary": "Returns the list of Facebook reels created during a period of time.",
        "description": "",
        "operationId": "getFacebookReels",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookReel"
            }
          }
        }
      }
    },
    "/v2/analytics/stories/facebook": {
      "get": {
        "tags": ["Facebook Analytics Service"],
        "summary": "Returns the list of Facebook stories created during a period of time.",
        "description": "",
        "operationId": "getFacebookStories",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookStory"
            }
          }
        }
      }
    },
    "/v2/analytics/keywords/gbp": {
      "get": {
        "tags": ["Gbp Analytics Service"],
        "operationId": "getGbpKeywords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseGbpKeyword"
            }
          }
        }
      }
    },
    "/v2/hashtags-tracker/tracking-sessions": {
      "get": {
        "tags": ["Hashtags Tracker Api Service"],
        "operationId": "getHashtagSessions",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseHashtagsTrackerSession"
            }
          }
        }
      },
      "post": {
        "tags": ["Hashtags Tracker Api Service"],
        "operationId": "createSession",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TrackSessionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseHashtagsTrackerSession"
            }
          }
        }
      }
    },
    "/v2/hashtags-tracker/days": {
      "put": {
        "tags": ["Hashtags Tracker Api Service"],
        "operationId": "purchaseDays",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PurchaseDaysRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponsePurchaseDaysResponse"
            }
          }
        }
      }
    },
    "/v2/hashtags-tracker/tracking-sessions/{id}/distribution": {
      "get": {
        "tags": ["Hashtags Tracker Api Service"],
        "operationId": "distributionHashtagsTracker",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "network",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "subject",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseDistributionItem"
            }
          }
        }
      }
    },
    "/v2/hashtags-tracker/tracking-sessions/{id}/consolidations": {
      "post": {
        "tags": ["Hashtags Tracker Api Service"],
        "operationId": "executeManualSync",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/analytics/posts/instagram/hashtags": {
      "get": {
        "tags": ["Instagram Analytics Service"],
        "summary": "Returns the list of Instagram hashtags used on posts created during a period of time.",
        "description": "",
        "operationId": "getInstagramPostsHashtags",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramHashtag"
            }
          }
        }
      }
    },
    "/v2/analytics/reels/instagram": {
      "get": {
        "tags": ["Instagram Analytics Service"],
        "summary": "Returns the list of Instagram reels created during a period of time.",
        "description": "",
        "operationId": "getInstagramReels",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramReel"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/instagram": {
      "get": {
        "tags": ["Instagram Analytics Service"],
        "summary": "Returns the list of Instagram posts created during a period of time.",
        "description": "",
        "operationId": "getInstagramPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramPost"
            }
          }
        }
      }
    },
    "/v2/analytics/stories/instagram": {
      "get": {
        "tags": ["Instagram Analytics Service"],
        "summary": "Returns the list of Instagram stories created during a period of time.",
        "description": "",
        "operationId": "getInstagramStories",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramStory"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/linkedin": {
      "get": {
        "tags": ["Linkedin Analytics Service"],
        "summary": "Returns the list of Linkedin posts created during a period of time.",
        "description": "",
        "operationId": "getPosts_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLinkedinPost"
            }
          }
        }
      }
    },
    "/v2/analytics/newsletters/linkedin": {
      "get": {
        "tags": ["Linkedin Analytics Service"],
        "summary": "Returns the list of Linkedin newsletters created during a period of time.",
        "description": "",
        "operationId": "getNewsLetters",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLinkedinPost"
            }
          }
        }
      }
    },
    "/v2/media/images": {
      "get": {
        "tags": ["Media Api Service"],
        "operationId": "searchPhotos",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orientation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "color",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/PhotosSearchResponse"
            }
          }
        }
      }
    },
    "/v2/media/videos": {
      "get": {
        "tags": ["Media Api Service"],
        "operationId": "searchVideos",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orientation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minWidth",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minHeight",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "minDuration",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxDuration",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/VideosSearchResponse"
            }
          }
        }
      }
    },
    "/v2/media": {
      "put": {
        "tags": ["Media Api Service"],
        "operationId": "mergeUploadedChunks",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MergeMediaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUploadMediaResponse"
            }
          }
        }
      }
    },
    "/v2/smart-links/links/{id}": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "getInfo",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSmartLink"
            }
          }
        }
      },
      "put": {
        "tags": ["Smart Links Api Service"],
        "operationId": "updateInfo",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSmartLink"
            }
          }
        }
      },
      "delete": {
        "tags": ["Smart Links Api Service"],
        "operationId": "delete",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/smart-links/links/{id}/analytics/buttons": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "getButtons",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseButtonRow"
            }
          }
        }
      }
    },
    "/v2/smart-links/links/slugs": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "isSlugAvailable",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/smart-links/links": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "find",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSmartLink"
            }
          }
        }
      },
      "post": {
        "tags": ["Smart Links Api Service"],
        "operationId": "createSM",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SmartLink"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSmartLink"
            }
          }
        }
      }
    },
    "/v2/smart-links/links/{id}/analytics/timeline": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "timelineSM",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metric",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseTimelineSeries"
            }
          }
        }
      }
    },
    "/v2/smart-links/links/{id}/analytics/images": {
      "get": {
        "tags": ["Smart Links Api Service"],
        "operationId": "getImages",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseImageRow"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/threads": {
      "get": {
        "tags": ["Threads Analytics Service"],
        "summary": "Returns the list of threads posts published during a period of time.",
        "description": "",
        "operationId": "getPosts_3",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseThreadsPost"
            }
          }
        }
      }
    },
    "/v2/analytics/posts/tiktok": {
      "get": {
        "tags": ["TikTok Analytics Service"],
        "summary": "Returns the list of TikTok posts created during a period of time.",
        "description": "",
        "operationId": "getTiktokPosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "From Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "description": "To Date and time ISO 8601 format. e.g. 2021-01-01T10:00:00",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "(Optional) The timezone used for the date range to search. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseTikTokPost"
            }
          }
        }
      }
    },
    "/v2/advertising/adgroups": {
      "get": {
        "tags": ["Adgroups Api Service"],
        "operationId": "getAdgroups",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "providers[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "campaignId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAdgroup"
            }
          }
        }
      }
    },
    "/v2/advertising/ads": {
      "get": {
        "tags": ["Ads Api Service"],
        "operationId": "getAds",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "providers[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "adgroupId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAd"
            }
          }
        }
      }
    },
    "/v2/advertising/ads/previews": {
      "post": {
        "tags": ["Ads Previews Api Service"],
        "operationId": "generatePreviews",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "adPosition",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAdPreview"
            }
          }
        }
      }
    },
    "/v2/advertising/campaigns": {
      "get": {
        "tags": ["Campaigns Service"],
        "operationId": "getCampaigns",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "providers[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCampaign"
            }
          }
        }
      }
    },
    "/v2/advertising/ads/facebookads-accounts/{facebookAdsId}": {
      "get": {
        "tags": ["Facebook Ads Account Api Service"],
        "operationId": "getFbAdsAccountData",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "facebookAdsId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseFbAdsAccountData"
            }
          }
        }
      }
    },
    "/v2/advertising/keywords": {
      "get": {
        "tags": ["Keywords Api Service"],
        "operationId": "getKeywords",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaignId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "adgroupId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseKeyword"
            }
          }
        }
      }
    },
    "/v2/advertising/recommendations/{recommendationId}": {
      "put": {
        "tags": ["Recommendations Api Service"],
        "operationId": "applyRecommendation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "recommendationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/advertising/recommendations": {
      "get": {
        "tags": ["Recommendations Api Service"],
        "operationId": "getRecommendations",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseRecommendationsResponse"
            }
          }
        }
      },
      "put": {
        "tags": ["Recommendations Api Service"],
        "operationId": "applyRecommendations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "ids[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseApplyRecommendationResult"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/gender": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getGender",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/keywords": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getSuggestionsKeywords",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSuggestedItem"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/age": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getAge",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/audiences-and-interests": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getAudiencesAndInterests",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSuggestedItem"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/locations": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getSuggestionsLocations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          },
          {
            "name": "searchTerm",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSuggestedLocation"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/languages": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getLanguages",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseLanguagesSuggestionResponse"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/audience-forecast": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getAudienceForecast",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAudienceForecast"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/pixels": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getPixels",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponsePixel"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/conversion-events": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getConversionEvents",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAdsCustomEvent"
            }
          }
        }
      }
    },
    "/v2/advertising/suggestions/currencies": {
      "post": {
        "tags": ["Suggestions Service"],
        "operationId": "getCurrencies",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CampaignCreationState"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponsePlatformCurrency"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/test-mail": {
      "post": {
        "tags": ["Agency Customization Kit Api Service"],
        "summary": "Send a test mail with the mail configuration.",
        "description": "",
        "operationId": "sendTestMail",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to send Agency test mail.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AgencyTestMailData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/agency-CK/details": {
      "get": {
        "tags": ["Agency Customization Kit Api Service"],
        "summary": "Get an Agency customization Kit",
        "description": "",
        "operationId": "getAgencyDetails",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAgencyDetailsDto"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}": {
      "get": {
        "tags": ["Agency Customization Kit Api Service"],
        "summary": "Get an Agency customization Kit",
        "description": "",
        "operationId": "get",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAgencyDto"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/properties": {
      "patch": {
        "tags": ["Agency Customization Kit Api Service"],
        "summary": "Edit Agency configuration properties",
        "description": "",
        "operationId": "update",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to set Agency properties.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AgencyPropertiesForUpdateDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAgencyPropertiesForUpdateDto"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/end-clients/{endClientId}/assignments": {
      "put": {
        "tags": ["Agency end-clients Api Service"],
        "summary": "Create or modify an end-client's brand assignment",
        "description": "",
        "operationId": "updateBrandAssignments",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endClientId",
            "in": "path",
            "description": "id of the end-client",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgencyEndClientBrandDto"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAgencyEndClientBrandDto"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/end-clients/{endClientId}/activation-link": {
      "post": {
        "tags": ["Agency end-clients Api Service"],
        "summary": "Resend Agency end-client invitation link",
        "description": "",
        "operationId": "resendActivationLink",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endClientId",
            "in": "path",
            "description": "id of the end-client",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AgencyEndClientActivationLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/end-clients": {
      "get": {
        "tags": ["Agency end-clients Api Service"],
        "summary": "Get Agency end-clients",
        "description": "",
        "operationId": "get_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "(Optional) Json filter that must have a username \r\nIf the filter is set, it returns the end-client with this username if exists, \r\n if not, it returns an empty list",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseAgencyEndClientDto"
            }
          }
        }
      },
      "post": {
        "tags": ["Agency end-clients Api Service"],
        "summary": "Add a new end-client to an Agency Customization Kit.",
        "description": "",
        "operationId": "create",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to create an end-client.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AgencyEndClientCreationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAgencyEndClientDto"
            }
          }
        }
      }
    },
    "/v2/agency-CK/{agencyId}/end-clients/{endClientId}": {
      "delete": {
        "tags": ["Agency end-clients Api Service"],
        "summary": "Delete an end-client from an Agency Customization Kit.",
        "description": "",
        "operationId": "delete_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "id of an Agency Customization Kit",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endClientId",
            "in": "path",
            "description": "id of the end-client",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/authorization/authorities": {
      "get": {
        "tags": ["Authorization Api Service"],
        "summary": "Get authorities of authenticated user",
        "description": "",
        "operationId": "getAuthoritiesFromToken",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseString"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/collaborators/{collaboratorId}/activation-link": {
      "post": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "resendActivationLink_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "collaboratorId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmailActivationInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/collaborators": {
      "get": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "getBrandRoleCollaborators",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBrandRoleCollaborator"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/collaborators/{email}": {
      "post": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "insertBrandRoleCollaborator",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BrandRoleAssignmentsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandRoleCollaborator"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/collaborators/{collaboratorId}": {
      "put": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "updateBrandRoleAssignmentsByCollaboratorId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "collaboratorId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BrandRoleAssignment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBrandRoleAssignment"
            }
          }
        }
      },
      "delete": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "deleteBrandRoleCollaborator",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "collaboratorId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/assignment": {
      "delete": {
        "tags": ["Brand Role Collaborators Api Service"],
        "operationId": "deleteBrandRoleAssignment",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brandId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/roles": {
      "get": {
        "tags": ["Brand Roles Api Service"],
        "operationId": "getRoles",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBrandRole"
            }
          }
        }
      },
      "post": {
        "tags": ["Brand Roles Api Service"],
        "operationId": "createBrandRole",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateBrandRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandRole"
            }
          }
        }
      }
    },
    "/v2/authorization/{userId}/roles/{roleId}": {
      "delete": {
        "tags": ["Brand Roles Api Service"],
        "operationId": "deleteRole",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      },
      "patch": {
        "tags": ["Brand Roles Api Service"],
        "operationId": "updateRole",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "roleId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateBrandRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandRole"
            }
          }
        }
      }
    },
    "/v2/chat": {
      "post": {
        "tags": ["Chat Api Service"],
        "summary": "Process chat request",
        "description": "",
        "operationId": "chat",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChatRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChatResponse"
            }
          }
        }
      }
    },
    "/v2/chat/{sessionId}": {
      "put": {
        "tags": ["Chat Api Service"],
        "summary": "Continue existing chat session",
        "description": "",
        "operationId": "continueChat",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChatRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChatResponse"
            }
          }
        }
      }
    },
    "/v2/features/check/{name}": {
      "get": {
        "tags": ["Feature Toggle Service"],
        "summary": "Check if feature is enabled for current user",
        "description": "Checks if a feature is enabled for the authenticated user.",
        "operationId": "checkFeature",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Feature name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/v2/features": {
      "get": {
        "tags": ["Feature Toggle Service"],
        "summary": "Get all feature toggles",
        "description": "Retrieves all feature toggles. Admin access required.",
        "operationId": "getAllFeatures",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      },
      "post": {
        "tags": ["Feature Toggle Service"],
        "summary": "Create new feature toggle",
        "description": "Creates a new feature toggle. Admin access required.",
        "operationId": "createFeature",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateFeatureToggleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature toggle created successfully"
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "409": {
            "description": "Conflict - Feature name already exists"
          }
        }
      }
    },
    "/v2/features/{id}": {
      "get": {
        "tags": ["Feature Toggle Service"],
        "summary": "Get feature toggle by ID",
        "description": "Retrieves a specific feature toggle by ID. Admin access required.",
        "operationId": "getFeatureById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature toggle ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Feature toggle not found"
          }
        }
      },
      "put": {
        "tags": ["Feature Toggle Service"],
        "summary": "Update feature toggle",
        "description": "Updates an existing feature toggle. Admin access required.",
        "operationId": "updateFeature",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature toggle ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateFeatureToggleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature toggle updated successfully"
          },
          "400": {
            "description": "Bad request - Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Feature toggle not found"
          }
        }
      },
      "delete": {
        "tags": ["Feature Toggle Service"],
        "summary": "Delete feature toggle",
        "description": "Deletes a feature toggle. Admin access required.",
        "operationId": "deleteFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Feature toggle ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          },
          "204": {
            "description": "Feature toggle deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "Feature toggle not found"
          }
        }
      }
    },
    "/v2/features/enabled": {
      "get": {
        "tags": ["Feature Toggle Service"],
        "summary": "Get all enabled features for the logged user",
        "description": "Returns all features that are enabled for the current user.",
        "operationId": "getEnabledFeatures",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFeatureToggleDto"
            }
          }
        }
      }
    },
    "/v2/inbox/conversations": {
      "get": {
        "tags": ["Conversations Api Service"],
        "operationId": "getConversations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseConversation"
            }
          }
        }
      },
      "post": {
        "tags": ["Conversations Api Service"],
        "operationId": "postMessage",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/inbox/conversations/authorizations": {
      "get": {
        "tags": ["Conversations Api Service"],
        "summary": "Verify needed brand provider authorizations for Inbox feature by provider.",
        "description": "",
        "operationId": "verifyAuthorizationsConversations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "description": "Provider where you want to verify authorization. Example: INSTAGRAM, TWITTER,...",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAuthorizations"
            }
          }
        }
      }
    },
    "/v2/inbox/conversations/fetch-image": {
      "get": {
        "tags": ["Conversations Api Service"],
        "operationId": "fetchImage",
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "target",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/inbox/notes": {
      "get": {
        "tags": ["Inbox Notes Api Service"],
        "operationId": "getNotes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "participantScreenNames",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "participantAccountIds",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInboxNote"
            }
          }
        }
      },
      "post": {
        "tags": ["Inbox Notes Api Service"],
        "operationId": "createNote",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InboxNoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseInboxNote"
            }
          }
        }
      }
    },
    "/v2/inbox/notes/{noteId}": {
      "put": {
        "tags": ["Inbox Notes Api Service"],
        "operationId": "updateNote",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/InboxNoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseInboxNote"
            }
          }
        }
      },
      "delete": {
        "tags": ["Inbox Notes Api Service"],
        "operationId": "deleteNote",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/inbox/status": {
      "put": {
        "tags": ["Inbox Status Change Api Service"],
        "operationId": "changeStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChangeStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/inbox/post-comments": {
      "get": {
        "tags": ["Post Comments Api Service"],
        "operationId": "getComments",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponsePostCommentsThread"
            }
          }
        }
      },
      "post": {
        "tags": ["Post Comments Api Service"],
        "operationId": "postComment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewCommentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      },
      "delete": {
        "tags": ["Post Comments Api Service"],
        "operationId": "deleteComment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/inbox/post-comments/authorizations": {
      "get": {
        "tags": ["Post Comments Api Service"],
        "operationId": "verifyAuthorizationsComments",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAuthorizations"
            }
          }
        }
      }
    },
    "/v2/inbox/reviews/replies": {
      "post": {
        "tags": ["Reviews Api Service"],
        "operationId": "postReply",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewReplyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      },
      "delete": {
        "tags": ["Reviews Api Service"],
        "operationId": "deleteReply",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteReplyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/inbox/reviews": {
      "get": {
        "tags": ["Reviews Api Service"],
        "operationId": "getReviews",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseReview"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/languages": {
      "get": {
        "tags": ["Ai Api Service"],
        "summary": "Get list of available AI languages",
        "description": "",
        "operationId": "getAvailableAILanguages",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLanguageInfo"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/{blogId}/system-prompts": {
      "get": {
        "tags": ["Ai Api Service"],
        "summary": "Get list of social media system prompts for a blog",
        "description": "",
        "operationId": "getSocialMediaSystemPrompts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSocialMediaSystemPromptResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Ai Api Service"],
        "summary": "Delete personalized system prompts for a blog",
        "description": "",
        "operationId": "customizeSystemPromptsForBlog_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "promptType",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSystemPromptResponse"
            }
          }
        }
      },
      "patch": {
        "tags": ["Ai Api Service"],
        "summary": "Customize system prompts for a blog",
        "description": "",
        "operationId": "customizeSystemPromptsForBlog",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SocialMediaSystemPromptRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSystemPromptResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/quick-actions/{quick-action}": {
      "post": {
        "tags": ["Ai Api Service"],
        "summary": "Process AI quick action",
        "description": "",
        "operationId": "getQuickActionResponse",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "quick-action",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssistantMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAssistantMessageResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/posts": {
      "post": {
        "tags": ["Ai Api Service"],
        "summary": "Create AI new post copy",
        "description": "",
        "operationId": "createAIPostCopy",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AssistantMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAssistantMessageResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/posts{thread-id}": {
      "put": {
        "tags": ["Ai Api Service"],
        "summary": "Generate another AI post copy with or without context",
        "description": "",
        "operationId": "generateAnotherAIPostCopy",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "thread-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "(/thread_(\\w+))?"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/VariantMessageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseAssistantMessageResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/natural-language-scheduling": {
      "post": {
        "tags": ["Ai Natural Language Scheduling Api Service"],
        "summary": "Start natural language post processing job",
        "description": "",
        "operationId": "processNaturalLanguageJob",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JobInfoRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseJobInfoResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/natural-language-scheduling/{jobId}": {
      "get": {
        "tags": ["Ai Natural Language Scheduling Api Service"],
        "summary": "Get job status and result for natural language post processing",
        "description": "",
        "operationId": "getNaturalLanguageJobInfo",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseJobInfoResponse"
            }
          }
        }
      },
      "patch": {
        "tags": ["Ai Natural Language Scheduling Api Service"],
        "summary": "Update the status of a natural language post processing job to cancelled",
        "description": "",
        "operationId": "cancelledJobStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateJobStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseJobInfoResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/natural-language-scheduling/jobs": {
      "get": {
        "tags": ["Ai Natural Language Scheduling Api Service"],
        "summary": "Get list of job info for natural language post processing in last 30 days",
        "description": "",
        "operationId": "getListOfNaturalLanguageJobs",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseJobInfoResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/ai/natural-language-scheduling/{jobId}/posts": {
      "get": {
        "tags": ["Ai Natural Language Scheduling Api Service"],
        "summary": "Get list of posts scheduled by a natural language job",
        "description": "",
        "operationId": "getListOfNaturalLanguagePosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseNaturalLanguageScheduledPostsDto"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/disconnect": {
      "post": {
        "tags": ["Canva integration service"],
        "operationId": "disconnect",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/integrations/canva/folders/{folderId}/items": {
      "get": {
        "tags": ["Canva integration service"],
        "operationId": "folder",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "item_types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaFolderContent"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/designs": {
      "get": {
        "tags": ["Canva integration service"],
        "operationId": "designs",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "continuation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ownership",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaUserDesigns"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/exports": {
      "post": {
        "tags": ["Canva integration service"],
        "operationId": "startExportJob",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CanvaExportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaExportJob"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/exports/{exportId}": {
      "get": {
        "tags": ["Canva integration service"],
        "operationId": "canvaExportJobStatus",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaExportJob"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/me/profile": {
      "get": {
        "tags": ["Canva integration service"],
        "operationId": "profile",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaUserProfile"
            }
          }
        }
      }
    },
    "/v2/integrations/canva/me": {
      "get": {
        "tags": ["Canva integration service"],
        "operationId": "me",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/CanvaUserDetails"
            }
          }
        }
      }
    },
    "/v2/integrations/google-drive/disconnect": {
      "post": {
        "tags": ["Drive integration service"],
        "operationId": "disconnect_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/integrations/google-drive/files/{fileId}": {
      "get": {
        "tags": ["Drive integration service"],
        "operationId": "getFileByFileId",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "alt",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "supportsAllDrives",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DriveFileResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/google-drive/drives": {
      "post": {
        "tags": ["Drive integration service"],
        "operationId": "getDrivesList",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DriveDrivesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriveResponse"
              }
            }
          }
        }
      }
    },
    "/v2/integrations/google-drive/files": {
      "post": {
        "tags": ["Drive integration service"],
        "operationId": "getUserFiles",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DriveFilesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DriveFileListResponse"
            }
          }
        }
      }
    },
    "/v2/integrations/google-drive/me": {
      "get": {
        "tags": ["Drive integration service"],
        "operationId": "me_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/DriveUserDetailsResponse"
            }
          }
        }
      }
    },
    "/v2/partners/{partner}": {
      "get": {
        "tags": [
          "This endpoint returns the required configuration to embed Metricool in our partners' sites"
        ],
        "summary": "It returns the required configuration for a partner",
        "description": "",
        "operationId": "configuration",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "partner",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomizedUserConfiguration"
            }
          }
        }
      }
    },
    "/v2/analytics/reports/configuration": {
      "get": {
        "tags": ["Customize Report Api Service"],
        "operationId": "getReportConfigurations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reportType",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseReportConfiguration"
            }
          }
        }
      },
      "put": {
        "tags": ["Customize Report Api Service"],
        "operationId": "updateReportConfigurations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseReportConfiguration"
            }
          }
        }
      }
    },
    "/v2/analytics/reports/demo": {
      "post": {
        "tags": ["Customize Report Api Service"],
        "summary": "Send demo report to user",
        "description": "",
        "operationId": "sendReportDemo",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Mail to send with subject, text and receiver",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MailDemoReport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/brands/{blogId}/reports/{jobId}": {
      "get": {
        "tags": ["Report Api Service"],
        "summary": "Get report status",
        "description": "",
        "operationId": "getReportStatusInfo",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ReportRequest"
            }
          },
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseReportStatusInfo"
            }
          }
        }
      }
    },
    "/v2/brands/{blogId}/reports": {
      "get": {
        "tags": ["Report Api Service"],
        "summary": "Get list of report history items",
        "description": "",
        "operationId": "list",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseReportHistoryItem"
            }
          }
        }
      }
    },
    "/v2/scheduler/tasks/{userId}": {
      "get": {
        "tags": ["Approval Task Api Service"],
        "operationId": "getApprovalTask",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "editorStatus[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "reviewerStatus[]",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseApprovalTask"
            }
          }
        }
      }
    },
    "/v2/scheduler/tasks/{reviewerId}/count": {
      "get": {
        "tags": ["Approval Task Api Service"],
        "operationId": "getReviewerApprovalTaskCount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "reviewerId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "brandIdToReview",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseInteger"
            }
          }
        }
      }
    },
    "/v2/scheduler/tasks/{userId}/counters": {
      "get": {
        "tags": ["Approval Task Api Service"],
        "operationId": "getUserOpenedTasksCount",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseOpenedTasksCount"
            }
          }
        }
      }
    },
    "/v2/scheduler/besttimes/{provider}": {
      "get": {
        "tags": ["Best Times Api Service"],
        "summary": "Returns best time values to publish",
        "description": "",
        "operationId": "getBestTimes",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "supported values: facebook, instagram, tiktok, linkedin, youtube",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date from you want to return the besttimes. ('2011-12-03T10:15:30')",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "The date until you want to return the besttimes. ('2011-12-04T10:15:30')",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The timezone in which you want to return the besttimes. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBestTimes"
            }
          }
        }
      }
    },
    "/v2/scheduler/boards/pinterest": {
      "get": {
        "tags": ["Boards Api Service"],
        "operationId": "getPinterestBoards",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBoard"
            }
          }
        }
      },
      "post": {
        "tags": ["Boards Api Service"],
        "operationId": "createPinterestBoard",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Board"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoard"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/instagram/scopes": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "verifyScopes_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseCollectionString"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/threads/geo-gating/eligibility": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getThreadsGeoGatingEligibility",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/instagram/eligibility": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getInstagramShopProductTagEligibility",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/instagram": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getInstagramCatalogs",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseIGCatalog"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/products/instagram": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getInstagramCatalogProducts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "catalogId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseIGCatalogProduct"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/youtube/categories": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getYoutubeCategories",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "lang",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseListYoutubeVideoCategory"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/youtube/playlists": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "summary": "Get YouTube playlists from YouTube",
        "description": "",
        "operationId": "getYoutubePlaylists",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "refresh",
            "in": "query",
            "description": "If true, playlists will be refreshed from YouTube",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/YoutubePlaylistDto"
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/catalogs/facebook/audio-recommendations": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getFacebookAudioRecommendations",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseFacebookRecommendedAudio"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/tiktok/scopes": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "verifyTiktokScopes",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseCollectionString"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/tiktok/creator-info": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "operationId": "getTiktokCreatorInfo",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseTikTokCreatorInfo"
            }
          }
        }
      }
    },
    "/v2/scheduler/catalogs/tiktok/trending-tracks": {
      "get": {
        "tags": ["Catalogs Api Service"],
        "summary": "Get trending tracks from TikTok Business API",
        "description": "",
        "operationId": "getTiTokTrendingTracks",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "genre",
            "in": "query",
            "description": "Optional - Filter by genre (default: ALL)",
            "required": false,
            "type": "string"
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Optional - Filter by country code (default: US)",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateRange",
            "in": "query",
            "description": "Optional - Filter by date range (default: 7DAY)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TikTokTrendingTrackDto"
              }
            }
          },
          "403": {
            "description": "Not authorized (Business Account required)"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/counters": {
      "get": {
        "tags": ["Counters Api Service"],
        "operationId": "getCounters",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSchedulerCounters"
            }
          }
        }
      }
    },
    "/v2/scheduler/calendars/{calendar-id}/assignation": {
      "post": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Add calendar to user and/or blog, this calendar can be of two types: system (internal calendars) and user (calendars updated by users)",
        "description": "",
        "operationId": "addCalendar",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "description": "internal calendar id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "search-type user, blog or both(user & blog)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Information about adding a calendar to an user or blog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Remove calendar (any calendar type) for user or blog",
        "description": "",
        "operationId": "removeCalendar",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "description": "internal calendar id",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "search-type user or brand",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Response about remove a calendar for an user or blog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/calendars/{calendar-id}/cache": {
      "post": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Refresh calendar cache and generate a new one by calendar ID for calendars with type 'user'",
        "description": "",
        "operationId": "refreshCalendarCache",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "calendar-id",
            "in": "path",
            "description": "Calendar ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Cache refreshed and regenerated successfully",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/calendars/metadata": {
      "get": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Get calendar data from ics file url (don't store",
        "description": "",
        "operationId": "getCalendarFromURL",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "Public url to ics calendar file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/CalendarDto"
            }
          },
          "404": {
            "description": "ics file don't found"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v2/scheduler/calendars": {
      "get": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Get all system calendar data stored in database, only public",
        "description": "",
        "operationId": "findCalendars",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "calendar language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/calendars/assigned": {
      "get": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Search all assigned calendars by mark or/and by user. Search all calendar types system (internal calendars) and user (calendars updated by users)",
        "description": "",
        "operationId": "getSelectCalendars",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "calendar language",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/calendars/{calendar-id}/events": {
      "get": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "get calendar with it events in time period",
        "description": "",
        "operationId": "getCalendarEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "initDate",
            "in": "query",
            "description": "init calendar period ('2025-02-01T00:00:00')",
            "required": true,
            "type": "string"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "end calendar period ('2025-03-01T00:00:00')",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeZone",
            "in": "query",
            "description": "time zone",
            "required": true,
            "type": "string"
          },
          {
            "name": "calendar-id",
            "in": "path",
            "description": "Calendar identification",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "204": {
            "description": "Not content",
            "schema": {
              "$ref": "#/definitions/JsonOkResponse"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/calendars/{calendar-type}": {
      "post": {
        "tags": [
          "ICS Calendar Rest Services for Metricool calendar (scheduler)"
        ],
        "summary": "Create Calendar by type (ex: 'user', calendar with type user), and assign it to the user or blog. Exclude internal types",
        "description": "",
        "operationId": "addTypeCalendar",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "public url to ics calendar file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ICS calendar request data"
            }
          },
          {
            "name": "calendar-type",
            "in": "path",
            "description": "Calendar type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseICS Calendar Response Data"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CalendarDto"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/v2/scheduler/notifications-config": {
      "get": {
        "tags": ["Planner Notifications ApiService"],
        "operationId": "getConfiguration",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponsePlannerNotificationConfiguration"
            }
          }
        }
      },
      "put": {
        "tags": ["Planner Notifications ApiService"],
        "operationId": "updateConfiguration",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PlannerNotificationConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponsePlannerNotificationConfiguration"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{id}": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get a scheduled post by id.",
        "description": "",
        "operationId": "retrievePost",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the scheduled post.",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseScheduledPost"
            }
          }
        }
      },
      "put": {
        "tags": ["Posts Api Service"],
        "summary": "Update an existing scheduled post.",
        "description": "",
        "operationId": "update_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the post to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "configuration needed to update a post",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseScheduledPost"
            }
          }
        }
      },
      "delete": {
        "tags": ["Posts Api Service"],
        "summary": "Delete the selected post by id. If the post belongs to a thread and is the parent post, \r\nthis post and all those belonging to the thread, will be deleted.",
        "description": "",
        "operationId": "delete_2",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the scheduled post",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      },
      "patch": {
        "tags": ["Posts Api Service"],
        "summary": "Edit and update a scheduled post. If the post belongs to a thread and is the parent post, \r\nthis post and all those belonging to the thread, will be updated.",
        "description": "",
        "operationId": "updatePartial",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the post to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "list of fields to update",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "description": "configuration of the post to update",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPostUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get the scheduled posts between two dates or an uuid.",
        "description": "",
        "operationId": "retrievePosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "The start date from you want to return the posts. ('2011-12-03T10:15:30')",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "in": "query",
            "description": "The date until you want to return the posts. ('2011-12-04T10:15:30')",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "description": "The timezone in which you want to return the posts. ('Europe/Madrid')",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Json filter that must have publicationDate and providers or a valid uuid\r\n(both are not allowed, just one uuid or just publicationDate and providers)\r\nIf the filter is set none of the other params are taken into account",
            "required": false,
            "type": "string"
          },
          {
            "name": "extendedRange",
            "in": "query",
            "description": "(Optional) When it's true, search date range is expanded one day after and one day before to\r\navoid timezone changes issues. Default value is false",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseScheduledPost"
            }
          }
        }
      },
      "post": {
        "tags": ["Posts Api Service"],
        "summary": "Creates a new scheduled post.",
        "description": "",
        "operationId": "create_1",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "Optional job identifier",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to schedule a post.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseScheduledPost"
            }
          }
        }
      },
      "put": {
        "tags": ["Posts Api Service"],
        "summary": "Send to review multiple posts of a brand in bulk.",
        "description": "",
        "operationId": "updatePosts",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to send to review multiple posts.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPostApprovalDataInBulk"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseScheduledPostApprovalDataUpdateResponse"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{id}/approvals": {
      "put": {
        "tags": ["Posts Api Service"],
        "summary": "Approve or reject a scheduled post by id and uuid.",
        "description": "",
        "operationId": "updatePostApprovalEvent",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the scheduled post.",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "JSON that represents the action of a reviewer.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPostApprovalEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/approvals-config": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get the brand configuration needed to send a post to review.",
        "description": "",
        "operationId": "getPostApprovalEvents",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandSchedulerPostApprovalData"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/instagram-properties": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get Instagram auto-publish properties for authenticated brand.",
        "description": "",
        "operationId": "getInstagramAutoPublishProperties",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseInstagramAutoPublishProperties"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{uuid}/events": {
      "get": {
        "tags": ["Scheduled Post Events Api Service"],
        "operationId": "getPostEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseScheduledPostEventDto"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{postId}/notes": {
      "get": {
        "tags": ["Scheduled Post Notes Api Service"],
        "operationId": "getScheduledPostNote",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseScheduledPostNote"
            }
          }
        }
      },
      "post": {
        "tags": ["Scheduled Post Notes Api Service"],
        "operationId": "createScheduledPostNote",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sourcePostId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPostNoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseScheduledPostNote"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{postId}/notes/{noteId}": {
      "put": {
        "tags": ["Scheduled Post Notes Api Service"],
        "operationId": "updateScheduledPostNote",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ScheduledPostNoteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseScheduledPostNote"
            }
          }
        }
      },
      "delete": {
        "tags": ["Scheduled Post Notes Api Service"],
        "operationId": "deleteScheduledPostNoteScheduler",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/posts/{postId}/notes/status": {
      "put": {
        "tags": ["Scheduled Post Notes Api Service"],
        "operationId": "setScheduledPostNotesStatus",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "postId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/library/posts": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get all library posts of a brand.",
        "description": "",
        "operationId": "retrievePosts_1",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLibraryPostDto"
            }
          }
        }
      },
      "post": {
        "tags": ["Posts Api Service"],
        "summary": "Creates a new library post.",
        "description": "",
        "operationId": "create_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Configuration needed to create a library post.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LibraryPostDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseLibraryPostDto"
            }
          }
        }
      }
    },
    "/v2/scheduler/library/posts/{id}": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get a library post by id.",
        "description": "",
        "operationId": "retrievePost_1",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the library post.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseLibraryPostDto"
            }
          }
        }
      },
      "put": {
        "tags": ["Posts Api Service"],
        "summary": "Update an existing library post.",
        "description": "",
        "operationId": "update_2",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the post to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "configuration needed to update a library post",
            "required": false,
            "schema": {
              "$ref": "#/definitions/LibraryPostDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseLibraryPostDto"
            }
          }
        }
      },
      "delete": {
        "tags": ["Posts Api Service"],
        "summary": "Delete the selected library post by id. If the post belongs to a thread and is the parent post, \r\nthis post and all those belonging to the thread, will be deleted.",
        "description": "",
        "operationId": "delete_3",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the library post",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/scheduler/library/posts/{id}/events": {
      "get": {
        "tags": ["Posts Api Service"],
        "summary": "Get a library post events by id.",
        "description": "",
        "operationId": "retrieveEvents",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the library post.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLibraryPostEventDto"
            }
          }
        }
      }
    },
    "/v2/settings/brands/{brand-id}/images": {
      "get": {
        "tags": ["Brands Api Service"],
        "operationId": "fetchImage_1",
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "provider",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["Brands Api Service"],
        "operationId": "deleteBrandImage",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/brands/ip-filters": {
      "get": {
        "tags": ["Brands Api Service"],
        "operationId": "getIpFilters",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseIpFiltersResponse"
            }
          }
        }
      },
      "post": {
        "tags": ["Brands Api Service"],
        "operationId": "postIpFilters",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseIpFiltersResponse"
            }
          }
        }
      },
      "delete": {
        "tags": ["Brands Api Service"],
        "operationId": "deleteIpFilters",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseIpFiltersResponse"
            }
          }
        }
      }
    },
    "/v2/settings/brands/{brand-id}/feed": {
      "get": {
        "tags": ["Brands Api Service"],
        "operationId": "getBrandFeed",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandFeed"
            }
          }
        }
      },
      "put": {
        "tags": ["Brands Api Service"],
        "operationId": "setBrandFeed",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BrandFeed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrandFeed"
            }
          }
        }
      }
    },
    "/v2/settings/brands/{brand-id}": {
      "get": {
        "tags": ["Brands Api Service"],
        "operationId": "getBrand",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrand"
            }
          }
        }
      },
      "patch": {
        "tags": ["Brands Api Service"],
        "operationId": "updateBrand",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "brand-id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Brand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBrand"
            }
          }
        }
      }
    },
    "/v2/settings/brands": {
      "get": {
        "tags": ["Brands Api Service"],
        "summary": "Returns a list of brands for the current user.",
        "description": "",
        "operationId": "getBrands",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseBrandLite"
            }
          }
        }
      }
    },
    "/v2/settings/brands/engagement-ratio": {
      "put": {
        "tags": ["Brands Api Service"],
        "operationId": "saveEngagementRatioInAllMyManagedBrands",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EngagementRatioValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/brands/connections/{provider}": {
      "delete": {
        "tags": ["Connections V2 Api Service"],
        "operationId": "disconnect_2",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/settings/brands/connections/tiktok": {
      "post": {
        "tags": ["Connections V2 Api Service"],
        "operationId": "createTiktokConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BrandProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseString"
            }
          }
        }
      }
    },
    "/v2/settings/brands/connections/facebook": {
      "post": {
        "tags": ["Connections V2 Api Service"],
        "operationId": "createFacebookConnection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FacebookConnectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/brands/connections/instagram/media-feed": {
      "get": {
        "tags": ["Connections V2 Api Service"],
        "operationId": "getInstagramMedia",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseInstagramFeedMedia"
            }
          }
        }
      }
    },
    "/v2/settings/catalogs/countries": {
      "get": {
        "tags": ["Countries Api Service"],
        "operationId": "getCountries",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseCountry"
            }
          }
        }
      }
    },
    "/v2/settings/catalogs/countries/{region}/regions": {
      "get": {
        "tags": ["Countries Api Service"],
        "operationId": "getStates",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "region",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseState"
            }
          }
        }
      }
    },
    "/v2/settings/payment-methods/{paymentMethodToken}": {
      "delete": {
        "tags": ["Payment Methods Api Service"],
        "operationId": "deletePaymentMethod",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "paymentMethodToken",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/payment-methods": {
      "get": {
        "tags": ["Payment Methods Api Service"],
        "operationId": "getUserPaymentMethods",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUserPaymentMethods"
            }
          }
        }
      }
    },
    "/v2/settings/subscriptions/current": {
      "get": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "getCurrentSubscription",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSubscription"
            }
          }
        }
      }
    },
    "/v2/settings/subscription-plans": {
      "get": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "getSubscriptionPlans",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSubscriptionPlan"
            }
          }
        }
      }
    },
    "/v2/settings/subscriptions": {
      "post": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "createSubscription",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "updateSubscription",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionChangeRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "cancelSubscription",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SubscriptionCancelRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/subscription/coupon/{couponCode}": {
      "get": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "applyCoupon",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "planId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "addons.twitter",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "previousBalance",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseCouponResult"
            }
          }
        }
      }
    },
    "/v2/settings/subscriptions/prorated-discount": {
      "get": {
        "tags": ["Subscriptions Api Service"],
        "operationId": "getProratedDiscount",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseFloat"
            }
          }
        }
      }
    },
    "/v2/settings/third-party-apps": {
      "get": {
        "tags": ["Third Party Apps Api Service"],
        "summary": "Returns the list of connected apps",
        "description": "",
        "operationId": "connectedApplications",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Application"
              }
            }
          }
        }
      }
    },
    "/v2/settings/third-party-apps/{clientId}": {
      "delete": {
        "tags": ["Third Party Apps Api Service"],
        "summary": "Revoke access to a client",
        "description": "",
        "operationId": "revokeConnection",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/v2/settings/catalogs/timezones": {
      "get": {
        "tags": ["Timezones Api Service"],
        "operationId": "getTimezones",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseTimezone"
            }
          }
        }
      }
    },
    "/v2/settings/users/{id}": {
      "get": {
        "tags": ["Users Api Service"],
        "operationId": "getUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUser"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users Api Service"],
        "operationId": "deleteAccount",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeleteUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      },
      "patch": {
        "tags": ["Users Api Service"],
        "operationId": "updateUserSettings",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUser"
            }
          }
        }
      }
    },
    "/v2/settings/users/{id}/credentials": {
      "patch": {
        "tags": ["Users Api Service"],
        "operationId": "updateUserCredentials",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UpdateUserCredentialsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUserCredentials"
            }
          }
        }
      }
    },
    "/v2/settings/users/saved-texts": {
      "get": {
        "tags": ["Users Api Service"],
        "operationId": "getSavedTexts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "savedTextType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseSavedTextWithPermissions"
            }
          }
        }
      },
      "post": {
        "tags": ["Users Api Service"],
        "operationId": "createSavedText",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "savedTextType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SavedTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSavedText"
            }
          }
        }
      }
    },
    "/v2/settings/users/saved-texts/{savedTextId}": {
      "put": {
        "tags": ["Users Api Service"],
        "operationId": "updateSavedText",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "savedTextType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "savedTextId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SavedTextRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseSavedText"
            }
          }
        }
      },
      "delete": {
        "tags": ["Users Api Service"],
        "operationId": "deleteScheduledPostNote",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "savedTextType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "savedTextId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/users/saved-texts/tags": {
      "get": {
        "tags": ["Users Api Service"],
        "operationId": "getTagsFromSavedTexts",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "savedTextType",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseStTagCount"
            }
          }
        }
      }
    },
    "/v2/settings/users": {
      "get": {
        "tags": ["Users Api Service"],
        "operationId": "getUserInfo",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseUser"
            }
          }
        }
      },
      "head": {
        "tags": ["Users Api Service"],
        "operationId": "existsUserWithEmail",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "patch": {
        "tags": ["Users Api Service"],
        "operationId": "updateRecoveryCredentials",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RecoveryChangeRequest"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseBoolean"
            }
          }
        }
      }
    },
    "/v2/settings/users/{userId}/api-usage-stats": {
      "get": {
        "tags": ["Users Api Service"],
        "operationId": "getUserStatisticsForPeriod",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "from",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "to",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "aggregation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeEndpoints",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseApiConsumptionData"
            }
          }
        }
      }
    },
    "/v2/settings/users/{userId}/linkedin-trial/eligibility": {
      "get": {
        "tags": ["Users Api Service"],
        "summary": "Get eligibility for linkedin trial",
        "description": "",
        "operationId": "checkTrialEligibility",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseTrialEligibilityResponse"
            }
          }
        }
      }
    },
    "/v2/settings/users/{userId}/linkedin-trial/info": {
      "get": {
        "tags": ["Users Api Service"],
        "summary": "Get information for linkedin trial",
        "description": "",
        "operationId": "getTrialInformation",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkResponseTrialInfoResponse"
            }
          }
        }
      }
    },
    "/v2/settings/whitelabel/logininfo/{blogId}": {
      "get": {
        "tags": ["Whitelabel Settings Api Service"],
        "operationId": "getToken",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "expm",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "networks",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "blogId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dlprop",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {},
            "schema": {
              "$ref": "#/definitions/JsonOkResponseLoginInfo"
            }
          }
        }
      }
    },
    "/v2/settings/users/{userid}/legal-terms": {
      "get": {
        "tags": ["Legal terms api"],
        "summary": "Search user legal terms by status",
        "description": "",
        "operationId": "getLegalTerms",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User to search",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status to filter (only Pending at this momment)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/JsonOkListResponseLegalTermDto"
            }
          }
        }
      }
    },
    "/v2/settings/users/{userid}/contract-events": {
      "post": {
        "tags": ["User contract events api service"],
        "summary": "Register legal conditions change acceptation",
        "description": "",
        "operationId": "registerContractEvent",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "User who accepts",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Accepted change",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ContractEventRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "BrandRole": {
      "type": "object",
      "required": ["actions", "userId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "assignable": {
          "type": "boolean"
        },
        "deletedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "type": "boolean"
        },
        "actions": {
          "$ref": "#/definitions/BrandRoleActions"
        },
        "assignedUsersCount": {
          "type": "integer",
          "format": "int32"
        },
        "assignedEnabledCount": {
          "type": "integer",
          "format": "int32"
        },
        "assignedDisabledCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BrandRoleActions": {
      "type": "object",
      "properties": {
        "viewAnalytics": {
          "type": "boolean"
        },
        "viewInbox": {
          "type": "boolean"
        },
        "viewPlanner": {
          "type": "boolean"
        },
        "viewAds": {
          "type": "boolean"
        },
        "viewSmartlinks": {
          "type": "boolean"
        },
        "fullAccessReports": {
          "type": "boolean"
        },
        "fullAccessInbox": {
          "type": "boolean"
        },
        "fullAccessPlanner": {
          "type": "boolean"
        },
        "fullAccessAds": {
          "type": "boolean"
        },
        "fullAccessSmartlinks": {
          "type": "boolean"
        },
        "fullAccessHashtagTracker": {
          "type": "boolean"
        },
        "editBrand": {
          "type": "boolean"
        },
        "schedulePosts": {
          "type": "boolean"
        },
        "publishPosts": {
          "type": "boolean"
        },
        "approvePosts": {
          "type": "boolean"
        },
        "viewCondensedAnalytics": {
          "type": "boolean"
        }
      }
    },
    "DateTimeInfo": {
      "type": "object",
      "required": ["dateTime"],
      "properties": {
        "dateTime": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "PublicBlog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "ownerUserId": {
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "facebookPageId": {
          "type": "string"
        },
        "facebookGroup": {
          "type": "string"
        },
        "facebookGroupId": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        },
        "fbBusinessId": {
          "type": "string"
        },
        "googlePlus": {
          "type": "string"
        },
        "linkedinCompany": {
          "type": "string"
        },
        "facebookAds": {
          "type": "string"
        },
        "adwords": {
          "type": "string"
        },
        "gmb": {
          "type": "string"
        },
        "youtube": {
          "type": "string"
        },
        "twitch": {
          "type": "string"
        },
        "tiktokads": {
          "type": "string"
        },
        "pinterest": {
          "type": "string"
        },
        "tiktok": {
          "type": "string"
        },
        "threads": {
          "type": "string"
        },
        "bluesky": {
          "type": "string"
        },
        "feedRss": {
          "type": "string"
        },
        "tiktokAccountType": {
          "type": "string",
          "enum": ["BUSINESS", "PERSONAL"]
        },
        "instagramConnectionType": {
          "type": "string",
          "enum": ["BUSINESS", "FACEBOOK_LOGIN"]
        },
        "twitterPicture": {
          "type": "string"
        },
        "twitterSubscriptionType": {
          "type": "string"
        },
        "facebookPicture": {
          "type": "string"
        },
        "facebookGroupPicture": {
          "type": "string"
        },
        "instagramPicture": {
          "type": "string"
        },
        "linkedInPicture": {
          "type": "string"
        },
        "facebookAdsPicture": {
          "type": "string"
        },
        "facebookAdsName": {
          "type": "string"
        },
        "pinterestPicture": {
          "type": "string"
        },
        "pinterestBusiness": {
          "type": "boolean"
        },
        "tiktokPicture": {
          "type": "string"
        },
        "tiktokBusinessTokenExpiration": {
          "type": "string"
        },
        "threadsPicture": {
          "type": "string"
        },
        "threadsAccountName": {
          "type": "string"
        },
        "blueskyPicture": {
          "type": "string"
        },
        "blueskyHandle": {
          "type": "string"
        },
        "fbUserId": {
          "type": "string"
        },
        "inUserId": {
          "type": "string"
        },
        "adwordsUserId": {
          "type": "string"
        },
        "adwordsAccountName": {
          "type": "string"
        },
        "gmbUserId": {
          "type": "string"
        },
        "gmbAccountName": {
          "type": "string"
        },
        "gmbAddress": {
          "type": "string"
        },
        "gmbUrl": {
          "type": "string"
        },
        "tiktokadsUserId": {
          "type": "string"
        },
        "linkedInCompanyPicture": {
          "type": "string"
        },
        "linkedInCompanyName": {
          "type": "string"
        },
        "linkedInTokenExpiration": {
          "type": "string"
        },
        "linkedInUserProfileURL": {
          "type": "string"
        },
        "youtubeChannelName": {
          "type": "string"
        },
        "youtubeChannelPicture": {
          "type": "string"
        },
        "twitchName": {
          "type": "string"
        },
        "twitchPicture": {
          "type": "string"
        },
        "twitchChannelId": {
          "type": "string"
        },
        "tiktokadsDisplayName": {
          "type": "string"
        },
        "tiktokadsPicture": {
          "type": "string"
        },
        "tiktokUserProfileUrl": {
          "type": "string"
        },
        "isShared": {
          "type": "boolean"
        },
        "ownerUsername": {
          "type": "string"
        },
        "whiteLabelLink": {
          "type": "string"
        },
        "analyticModeWhitelabelLink": {
          "type": "string"
        },
        "whiteLabelAlias": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "frontendVersion": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "deleteDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleted": {
          "type": "boolean"
        },
        "joinDate": {
          "type": "string",
          "format": "date-time"
        },
        "firstConnectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastResolvedInboxMessageTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastReadInboxMessageTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "timezone": {
          "type": "string"
        },
        "availableConnectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brandRole": {
          "$ref": "#/definitions/BrandRole"
        },
        "isWhiteLabel": {
          "type": "boolean"
        },
        "isWhiteLabelOnlyRead": {
          "type": "boolean"
        },
        "engagementRatio": {
          "type": "integer",
          "format": "int32"
        },
        "hasXOAuth2Token": {
          "type": "boolean"
        },
        "isDemo": {
          "type": "boolean"
        }
      }
    },
    "TemplateReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ImageObject": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "previewUrl": {
          "type": "string"
        },
        "originalUrl": {
          "type": "string"
        }
      }
    },
    "PageInfo": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SearchResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageObject"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/PageInfo"
        }
      }
    },
    "InstagramBioCatalog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "postId": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "linkId": {
          "type": "integer",
          "format": "int32"
        },
        "shortUrl": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "InstagramLinkTree": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "color": {
          "type": "string"
        },
        "linkId": {
          "type": "integer",
          "format": "int32"
        },
        "shortUrl": {
          "type": "string"
        }
      }
    },
    "FacebookLocation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/FacebookLocationCoordinates"
        }
      }
    },
    "FacebookLocationCoordinates": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "state": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      }
    },
    "TwitterEvent": {
      "type": "object",
      "properties": {
        "twitterId": {
          "type": "integer",
          "format": "int64"
        },
        "date": {
          "type": "integer",
          "format": "int32"
        },
        "screenName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "followers": {
          "type": "integer",
          "format": "int32"
        },
        "friends": {
          "type": "integer",
          "format": "int32"
        },
        "isFollowedByMe": {
          "type": "boolean"
        },
        "isFollowingMe": {
          "type": "boolean"
        },
        "isMuted": {
          "type": "boolean"
        },
        "isBlocked": {
          "type": "boolean"
        },
        "isProtected": {
          "type": "boolean"
        },
        "isVerified": {
          "type": "boolean"
        },
        "lastActivity": {
          "type": "integer",
          "format": "int64"
        },
        "statusId": {
          "type": "string"
        },
        "tweetMedia": {
          "type": "string"
        },
        "strCreated": {
          "type": "string"
        }
      }
    },
    "CalendarCSVRow": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "draft": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "linkedIn": {
          "type": "string"
        },
        "gmb": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        },
        "imageUrl1": {
          "type": "string"
        },
        "imageUrl2": {
          "type": "string"
        },
        "imageUrl3": {
          "type": "string"
        },
        "imageUrl4": {
          "type": "string"
        },
        "imageUrl5": {
          "type": "string"
        },
        "imageUrl6": {
          "type": "string"
        },
        "imageUrl7": {
          "type": "string"
        },
        "imageUrl8": {
          "type": "string"
        },
        "imageUrl9": {
          "type": "string"
        },
        "imageUrl10": {
          "type": "string"
        },
        "shortener": {
          "type": "string"
        }
      }
    },
    "UserSettingsReportSections": {
      "type": "object",
      "properties": {
        "reportMonthlyDownload": {
          "type": "string"
        },
        "reportMonthlyMail": {
          "type": "string"
        },
        "reportLogo": {
          "type": "string"
        },
        "reportMonthlyMailText": {
          "type": "string"
        },
        "reportMonthlyDate": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "InfluencersRestrictions": {
      "type": "object",
      "properties": {
        "twitter": {
          "type": "integer",
          "format": "int32"
        },
        "facebook": {
          "type": "integer",
          "format": "int32"
        },
        "youtube": {
          "type": "integer",
          "format": "int32"
        },
        "instagram": {
          "type": "integer",
          "format": "int32"
        },
        "twitch": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerUrl": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "created": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "paymentMethodToken": {
          "type": "string"
        },
        "nextPaymentDateInDays": {
          "type": "integer",
          "format": "int32"
        },
        "nextPaymentDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "nextPaymentAmount": {
          "type": "number",
          "format": "float"
        },
        "taxData": {
          "$ref": "#/definitions/TaxData"
        },
        "usedProfiles": {
          "type": "integer",
          "format": "int32"
        },
        "usedPosts": {
          "type": "integer",
          "format": "int32"
        },
        "maxProfiles": {
          "type": "integer",
          "format": "int32"
        },
        "maxPosts": {
          "type": "integer",
          "format": "int32"
        },
        "maxPostsPerBrand": {
          "type": "integer",
          "format": "int32"
        },
        "maxAICreditsPerBrand": {
          "type": "integer",
          "format": "int32"
        },
        "plan": {
          "$ref": "#/definitions/SubscriptionPlan"
        },
        "immediatelyCancelable": {
          "type": "boolean"
        },
        "downgradeSubscription": {
          "$ref": "#/definitions/Subscription"
        },
        "addons": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AddonData"
          }
        },
        "adhocPlan": {
          "type": "boolean"
        },
        "trialInProgress": {
          "type": "boolean"
        }
      }
    },
    "SubscriptionPlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "billingCycles": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "profiles": {
          "type": "integer",
          "format": "int32"
        },
        "tweets": {
          "type": "integer",
          "format": "int32"
        },
        "maxPostsPerBrand": {
          "type": "integer",
          "format": "int32"
        },
        "shareProfiles": {
          "type": "boolean"
        },
        "whiteLabel": {
          "type": "boolean"
        },
        "influencers": {
          "type": "boolean"
        },
        "instagramBioLink": {
          "type": "boolean"
        },
        "reportTemplate": {
          "type": "boolean"
        },
        "currency": {
          "type": "string"
        },
        "reportDownload": {
          "type": "boolean"
        },
        "historyMaxDays": {
          "type": "integer",
          "format": "int64"
        },
        "influencersRestrictions": {
          "$ref": "#/definitions/InfluencersRestrictions"
        },
        "stripePriceId": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int32"
        },
        "annualDiscountPercent": {
          "type": "number",
          "format": "float"
        },
        "maxAICopiesByBrandPerMonth": {
          "type": "integer",
          "format": "int32"
        },
        "api": {
          "type": "boolean"
        },
        "dataLockerStudio": {
          "type": "boolean"
        },
        "zapier": {
          "type": "boolean"
        },
        "addons": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AddonData"
          }
        }
      }
    },
    "DMUserMention": {
      "type": "object",
      "properties": {
        "screenName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "idStr": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "DMVariant": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "bitRate": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DMVideoInfo": {
      "type": "object",
      "properties": {
        "variants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DMVariant"
          }
        }
      }
    },
    "ExtendedTweet": {
      "type": "object",
      "properties": {
        "fullText": {
          "type": "string"
        },
        "entities": {
          "$ref": "#/definitions/TwitterEntities"
        }
      }
    },
    "Tweet": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "idStr": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "text": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "favoriteCount": {
          "type": "integer",
          "format": "int32"
        },
        "retweetCount": {
          "type": "integer",
          "format": "int32"
        },
        "linkClicks": {
          "type": "integer",
          "format": "int32"
        },
        "promoted": {
          "type": "boolean"
        },
        "metricsV2": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "userName": {
          "type": "string"
        },
        "screenName": {
          "type": "string"
        },
        "followers": {
          "type": "integer",
          "format": "int64"
        },
        "impressions": {
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "type": "string"
        },
        "interactions": {
          "type": "integer",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "picture": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        },
        "hasVideo": {
          "type": "boolean"
        },
        "hasPhoto": {
          "type": "boolean"
        },
        "hasUrls": {
          "type": "boolean"
        },
        "isRetweet": {
          "type": "boolean"
        },
        "inReplyToScreenName": {
          "type": "string"
        },
        "inReplyToStatusIdStr": {
          "type": "string"
        },
        "inReplyToStatusId": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/TwitterProfile"
        },
        "retweetedStatus": {
          "$ref": "#/definitions/Tweet"
        },
        "entities": {
          "$ref": "#/definitions/TwitterEntities"
        },
        "extendedEntities": {
          "$ref": "#/definitions/TwitterExtendedEntities"
        },
        "coordinates": {
          "$ref": "#/definitions/TwitterCoordinates"
        },
        "extendedTweet": {
          "$ref": "#/definitions/ExtendedTweet"
        },
        "truncated": {
          "type": "boolean"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "retweets": {
          "type": "integer",
          "format": "int32"
        },
        "favorites": {
          "type": "integer",
          "format": "int32"
        },
        "retweet": {
          "type": "boolean"
        },
        "tweetId": {
          "type": "string"
        },
        "hasMedia": {
          "type": "boolean"
        },
        "hasTags": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        }
      }
    },
    "TwitterCoordinates": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "coordinates": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          }
        },
        "latitude": {
          "type": "number",
          "format": "float"
        },
        "longitude": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "TwitterEntities": {
      "type": "object",
      "properties": {
        "hashtags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwitterHashtag"
          }
        },
        "userMentions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DMUserMention"
          }
        },
        "media": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwitterMedia"
          }
        },
        "urls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwitterUrl"
          }
        }
      }
    },
    "TwitterExtendedEntities": {
      "type": "object",
      "properties": {
        "hashtags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TwitterHashtag"
          }
        },
        "userMentions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DMUserMention"
          }
        }
      }
    },
    "TwitterHashtag": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "TwitterMedia": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "mediaUrlHttps": {
          "type": "string"
        },
        "videoInfo": {
          "$ref": "#/definitions/DMVideoInfo"
        },
        "mediaSecureUrl": {
          "type": "string"
        }
      }
    },
    "TwitterProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "screenName": {
          "type": "string"
        },
        "profileImageUrl": {
          "type": "string"
        },
        "profileBannerUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "followersCount": {
          "type": "integer",
          "format": "int32"
        },
        "listedCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "idStr": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/Tweet"
        },
        "followers": {
          "type": "integer",
          "format": "int32"
        },
        "profileUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "profile_image_url_https": {
          "type": "string"
        },
        "picture": {
          "type": "string",
          "readOnly": true
        },
        "profile_background_image_url_https": {
          "type": "string"
        },
        "profile_background_color": {
          "type": "string"
        },
        "statuses_count": {
          "type": "integer",
          "format": "int32"
        },
        "friends_count": {
          "type": "integer",
          "format": "int32"
        },
        "favourites_count": {
          "type": "integer",
          "format": "int32"
        },
        "protected": {
          "type": "boolean"
        },
        "subscription_type": {
          "type": "string"
        }
      }
    },
    "TwitterUrl": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "expandedUrl": {
          "type": "string"
        },
        "displayUrl": {
          "type": "string"
        }
      }
    },
    "PublicPost": {
      "type": "object",
      "properties": {
        "postUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "excerpt": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "picture": {
          "type": "string"
        },
        "twShares": {
          "type": "integer",
          "format": "int32"
        },
        "fbShares": {
          "type": "integer",
          "format": "int32"
        },
        "inShares": {
          "type": "integer",
          "format": "int32"
        },
        "pinShares": {
          "type": "integer",
          "format": "int32"
        },
        "totalShares": {
          "type": "integer",
          "format": "int32"
        },
        "pageViews": {
          "type": "integer",
          "format": "int64"
        },
        "totalPageViews": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "VisitorEvent": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "fromUrl": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "device": {
          "type": "string"
        },
        "browser": {
          "type": "string"
        },
        "date": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "VisitorSession": {
      "type": "object",
      "properties": {
        "lastUrl": {
          "type": "string"
        },
        "fromUrl": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "device": {
          "type": "string"
        },
        "browser": {
          "type": "string"
        },
        "firstDate": {
          "type": "integer",
          "format": "int64"
        },
        "lastDate": {
          "type": "integer",
          "format": "int64"
        },
        "pagesCount": {
          "type": "integer",
          "format": "int32"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VisitorEvent"
          }
        }
      }
    },
    "VisitorSessionList": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VisitorSession"
          }
        },
        "timeline": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "InstagramPost": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "publishedAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "filter": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        },
        "interactions": {
          "type": "integer",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "reach": {
          "type": "integer",
          "format": "int32"
        },
        "saved": {
          "type": "integer",
          "format": "int32"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "views": {
          "type": "integer",
          "format": "int32"
        },
        "reachPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "postClicksPaid": {
          "type": "integer",
          "format": "int32"
        },
        "postInteractionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "spend": {
          "type": "number",
          "format": "double"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clicks": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "InstagramReel": {
      "type": "object",
      "properties": {
        "reelId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "publishedAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "filter": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "interactions": {
          "type": "integer",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "views": {
          "type": "integer",
          "format": "int32"
        },
        "reach": {
          "type": "integer",
          "format": "int32"
        },
        "saved": {
          "type": "integer",
          "format": "int32"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "reachPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "postClicksPaid": {
          "type": "integer",
          "format": "int32"
        },
        "postInteractionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "spend": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "InstagramStory": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "publishedAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "owner": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "permalink": {
          "type": "string"
        },
        "exits": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "reach": {
          "type": "integer",
          "format": "int32"
        },
        "replies": {
          "type": "integer",
          "format": "int32"
        },
        "tapsForward": {
          "type": "integer",
          "format": "int32"
        },
        "tapsBack": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "reachPaid": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Number": {
      "type": "object"
    },
    "GenderAgeDistribution": {
      "type": "object",
      "properties": {
        "gender": {
          "type": "string"
        },
        "age": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/Number"
        }
      }
    },
    "TwitchVideo": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "videoUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "game": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "format": "double"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "averageViews": {
          "type": "number",
          "format": "double"
        },
        "clips": {
          "type": "integer",
          "format": "int32"
        },
        "clipId": {
          "type": "string"
        },
        "clipUrl": {
          "type": "string"
        },
        "videoNameForClip": {
          "type": "string"
        },
        "videoUrlForClip": {
          "type": "string"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        }
      }
    },
    "TwitchClip": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "clipId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdTimestamp": {
          "type": "string",
          "format": "date-time"
        },
        "game": {
          "type": "string"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "clipUrl": {
          "type": "string"
        },
        "videoNameForClip": {
          "type": "string"
        },
        "videoUrlForClip": {
          "type": "string"
        }
      }
    },
    "TwitchSubscription": {
      "type": "object",
      "properties": {
        "broadcasterId": {
          "type": "string"
        },
        "subscriberId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "subscriberName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "isGift": {
          "type": "boolean"
        },
        "picture": {
          "type": "string"
        },
        "profileUrl": {
          "type": "string"
        },
        "gifterName": {
          "type": "string"
        },
        "gifterId": {
          "type": "string"
        }
      }
    },
    "AdCampaign": {
      "type": "object",
      "properties": {
        "adAccount": {
          "type": "string"
        },
        "customEventType": {
          "type": "string"
        },
        "objective": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerCampaignId": {
          "type": "string"
        },
        "conversions": {
          "type": "number",
          "format": "double"
        },
        "actions": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "providerId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "buying_type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "stop": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "number",
          "format": "double"
        },
        "reach": {
          "type": "number",
          "format": "double"
        },
        "clicks": {
          "type": "number",
          "format": "double"
        },
        "spent": {
          "type": "number",
          "format": "double"
        },
        "uniqueClicks": {
          "type": "number",
          "format": "double"
        },
        "uniqueCtr": {
          "type": "number",
          "format": "double"
        },
        "advertisingChannelType": {
          "type": "string"
        },
        "advertisingChannelSubType": {
          "type": "string"
        },
        "biddingStrategyType": {
          "type": "string"
        },
        "budgetId": {
          "type": "string"
        },
        "budget": {
          "type": "number",
          "format": "double"
        },
        "budgetType": {
          "type": "string",
          "enum": ["DAILY", "LIFETIME"]
        },
        "purchaseROAS": {
          "type": "number",
          "format": "double"
        },
        "allConversionsValue": {
          "type": "number",
          "format": "double"
        },
        "conversionsValue": {
          "type": "number",
          "format": "double"
        },
        "costPerConversion": {
          "type": "number",
          "format": "double"
        },
        "ctr": {
          "type": "number",
          "format": "double"
        },
        "impressionsReach": {
          "type": "number",
          "format": "double"
        },
        "averageCost": {
          "type": "number",
          "format": "double"
        },
        "averageCpc": {
          "type": "number",
          "format": "double"
        },
        "averageCpe": {
          "type": "number",
          "format": "double"
        },
        "averageCpm": {
          "type": "number",
          "format": "double"
        },
        "averageCpv": {
          "type": "number",
          "format": "double"
        },
        "averageCpp": {
          "type": "number",
          "format": "double"
        },
        "averagePageViews": {
          "type": "number",
          "format": "double"
        },
        "averagePosition": {
          "type": "number",
          "format": "double"
        },
        "historicalQualityScore": {
          "type": "number",
          "format": "double"
        },
        "country": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "conversionRate": {
          "type": "number",
          "format": "double"
        },
        "results": {
          "type": "number",
          "format": "double"
        },
        "resultsLabel": {
          "type": "string"
        },
        "gadsCtr": {
          "type": "number",
          "format": "double"
        },
        "cpm": {
          "type": "number",
          "format": "double"
        },
        "cpc": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "FacebookPost": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "pageId": {
          "type": "string"
        },
        "postId": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "link": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "reactions": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUnique": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUniquePaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUniqueOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "clicks": {
          "type": "integer",
          "format": "int32"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "picture": {
          "type": "string"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "videoTimeWatched": {
          "type": "integer",
          "format": "int32"
        },
        "linkclicks": {
          "type": "integer",
          "format": "int32"
        },
        "spend": {
          "type": "number",
          "format": "double"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        },
        "internalSearchId": {
          "type": "string"
        }
      }
    },
    "LinkedinPost": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "companyId": {
          "type": "string"
        },
        "postId": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "clicks": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "uniqueImpressions": {
          "type": "integer",
          "format": "int32"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "viewers": {
          "type": "integer",
          "format": "int32"
        },
        "timeWatched": {
          "type": "integer",
          "format": "int32"
        },
        "timeWatchedForVideoViews": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "AdsKeyword": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "date": {
          "type": "integer",
          "format": "int32"
        },
        "adAccount": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "matchType": {
          "type": "string"
        },
        "allConversions": {
          "type": "number",
          "format": "double"
        },
        "allConversionsValue": {
          "type": "number",
          "format": "double"
        },
        "averageCost": {
          "type": "number",
          "format": "double"
        },
        "averageCPC": {
          "type": "number",
          "format": "double"
        },
        "averageCPM": {
          "type": "number",
          "format": "double"
        },
        "clicks": {
          "type": "integer",
          "format": "int64"
        },
        "ctr": {
          "type": "number",
          "format": "double"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "engagements": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "interactions": {
          "type": "integer",
          "format": "int32"
        },
        "conversions": {
          "type": "number",
          "format": "double"
        },
        "conversionsValue": {
          "type": "number",
          "format": "double"
        },
        "campId": {
          "type": "string"
        },
        "adGroupId": {
          "type": "string"
        },
        "campName": {
          "type": "string"
        },
        "adGroupName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "costPerConversion": {
          "type": "number",
          "format": "double"
        },
        "averageCPE": {
          "type": "number",
          "format": "double"
        },
        "averageCPV": {
          "type": "number",
          "format": "double"
        },
        "averagePageViews": {
          "type": "number",
          "format": "double"
        },
        "averagePosition": {
          "type": "number",
          "format": "double"
        },
        "historicalCreativeQualityScore": {
          "type": "number",
          "format": "double"
        },
        "historicalLandingPageQualityScore": {
          "type": "number",
          "format": "double"
        },
        "historicalQualityScore": {
          "type": "number",
          "format": "double"
        },
        "historicalSearchPredictedCtr": {
          "type": "number",
          "format": "double"
        },
        "maxCPC": {
          "type": "number",
          "format": "double"
        },
        "biddingStrategy": {
          "type": "string"
        },
        "conversionRate": {
          "type": "number",
          "format": "double"
        },
        "purchaseROAS": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Ad": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "businessName": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "descriptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "mediaItems": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaItem"
          }
        }
      }
    },
    "GmbReview": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "reviewerName": {
          "type": "string"
        },
        "reviewerPhoto": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "starRating": {
          "type": "integer",
          "format": "int32"
        },
        "replied": {
          "type": "integer",
          "format": "int32"
        },
        "replyComment": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "GmbMedia": {
      "type": "object",
      "properties": {
        "ownerName": {
          "type": "string"
        },
        "ownerUrl": {
          "type": "string"
        },
        "ownerPhotoUrl": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "photoUrl": {
          "type": "string"
        },
        "mediaFormat": {
          "type": "string"
        },
        "mediaId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "viewsCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Blog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "type": "string"
        },
        "labelImg": {
          "type": "string"
        },
        "labelImgDefault": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "blogger": {
          "$ref": "#/definitions/User"
        },
        "created": {
          "type": "integer",
          "format": "int64"
        },
        "management_key": {
          "type": "string"
        },
        "twitter": {
          "type": "string"
        },
        "facebook": {
          "type": "string"
        },
        "fbGroup": {
          "type": "string"
        },
        "facebookAds": {
          "type": "string"
        },
        "facebookBusinessId": {
          "type": "string"
        },
        "googlePlus": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "joined": {
          "type": "string",
          "format": "date-time"
        },
        "purpose": {
          "type": "string"
        },
        "instagram": {
          "type": "string"
        },
        "linkedInCompany": {
          "type": "string"
        },
        "adwords": {
          "type": "string"
        },
        "pinterest": {
          "type": "string"
        },
        "gmb": {
          "type": "string"
        },
        "twitch": {
          "type": "string"
        },
        "youtube": {
          "type": "string"
        },
        "tiktokads": {
          "type": "string"
        },
        "tiktok": {
          "type": "string"
        },
        "threads": {
          "type": "string"
        },
        "bluesky": {
          "type": "string"
        },
        "shared": {
          "type": "boolean"
        },
        "grant": {
          "type": "string"
        },
        "deletedDate": {
          "type": "string",
          "format": "date-time"
        },
        "restoredDate": {
          "type": "string",
          "format": "date-time"
        },
        "firstConnectionDate": {
          "type": "string",
          "format": "date-time"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "timezone": {
          "type": "string"
        },
        "availableConnectors": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Web",
              "FacebookPage",
              "FacebookGroup",
              "Instagram",
              "Twitter",
              "Linkedin",
              "Gmb",
              "Pinterest",
              "TikTok",
              "TikTokBusiness",
              "Youtube",
              "Twitch",
              "FacebookAds",
              "GoogleAds",
              "TikTokAds",
              "FeedRss",
              "Threads",
              "Bluesky"
            ]
          }
        },
        "brandRoleActionDefinitions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VIEW_ALL_ANALYTICS",
              "VIEW_INBOX",
              "VIEW_PLANNER",
              "VIEW_ADS",
              "VIEW_SMARTLINKS",
              "FULL_ACCESS_REPORTS",
              "FULL_ACCESS_INBOX",
              "FULL_ACCESS_PLANNER",
              "FULL_ACCESS_ADS",
              "FULL_ACCESS_SMARTLINKS",
              "FULL_ACCESS_HASHTAG_TRACKER",
              "EDIT_BRAND",
              "SCHEDULE_POSTS",
              "PUBLISH_POSTS",
              "APPROVE_POSTS",
              "VIEW_CONDENSED_ANALYTICS"
            ]
          }
        },
        "readOnly": {
          "type": "boolean"
        }
      }
    },
    "GrantedAuthority": {
      "type": "object",
      "properties": {
        "authority": {
          "type": "string"
        }
      }
    },
    "OnboardingName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "PartnerOnboardingProperties": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/OnboardingName"
        },
        "finished": {
          "type": "boolean"
        }
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "externalId": {
          "type": "string"
        },
        "paymentId": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "currency": {
          "type": "string"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time"
        },
        "eurRate": {
          "type": "number",
          "format": "double"
        },
        "rateDate": {
          "type": "string",
          "format": "date-time"
        },
        "invoiceNumber": {
          "type": "string"
        },
        "paymentType": {
          "type": "string"
        },
        "vatRate": {
          "type": "number",
          "format": "double"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "vatNumber": {
          "type": "string"
        },
        "paymentToRefundId": {
          "type": "string"
        },
        "paymentToRefundInvoiceNumber": {
          "type": "string"
        },
        "paymentToRefundDate": {
          "type": "string",
          "format": "date-time"
        },
        "sync": {
          "type": "boolean"
        },
        "netsuiteInternalId": {
          "type": "string"
        },
        "base": {
          "type": "number",
          "format": "double"
        },
        "vat": {
          "type": "number",
          "format": "double"
        },
        "errorDetail": {
          "type": "string"
        },
        "blogList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Blog"
          }
        },
        "observations": {
          "type": "string"
        },
        "disbursement": {
          "type": "boolean"
        },
        "creditNote": {
          "type": "boolean"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mail": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "accountLogo": {
          "type": "string"
        },
        "headerLogo": {
          "type": "string"
        },
        "btCustomerId": {
          "type": "string"
        },
        "stripeCustomerId": {
          "type": "string"
        },
        "taxData": {
          "$ref": "#/definitions/TaxData"
        },
        "affiliated": {
          "type": "boolean"
        },
        "whiteLabel": {
          "type": "boolean"
        },
        "academic": {
          "type": "boolean"
        },
        "beta": {
          "type": "boolean"
        },
        "sendToAlternativeEmail": {
          "type": "boolean"
        },
        "alternativeEmail": {
          "type": "string"
        },
        "billEmails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "marketingNotifications": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "changePasswordRequired": {
          "type": "boolean"
        },
        "onboarding": {
          "$ref": "#/definitions/OnboardingData"
        },
        "activeBrands": {
          "type": "integer",
          "format": "int32"
        },
        "registeredFromTkAppCenter": {
          "type": "boolean"
        },
        "firstDayOfTheWeek": {
          "type": "integer",
          "format": "int32"
        },
        "whiteLabelIntegrator": {
          "type": "boolean"
        },
        "requiresEmailAddress": {
          "type": "boolean"
        },
        "vendastaSettings": {
          "$ref": "#/definitions/VendastaData"
        },
        "crispWorkspaceId": {
          "type": "string"
        },
        "agencyCKId": {
          "type": "integer",
          "format": "int32"
        },
        "integratedIn": {
          "type": "string"
        },
        "accountManagerMail": {
          "type": "string"
        }
      }
    },
    "UserIdentifier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "object"
        }
      }
    },
    "UserSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "mail": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "vat": {
          "type": "string"
        },
        "subscription": {
          "$ref": "#/definitions/Subscription"
        },
        "payment": {
          "$ref": "#/definitions/Payment"
        },
        "whiteLabelSettings": {
          "$ref": "#/definitions/WhiteLabelSettings"
        },
        "sharedWithUser": {
          "type": "boolean"
        },
        "vendastaUser": {
          "type": "boolean"
        },
        "vendastaSettings": {
          "$ref": "#/definitions/VendastaData"
        },
        "hashtagBalance": {
          "type": "integer",
          "format": "int32"
        },
        "vaxRate": {
          "type": "integer",
          "format": "int32"
        },
        "activeBrands": {
          "type": "integer",
          "format": "int32"
        },
        "whiteLabel": {
          "type": "boolean"
        },
        "beta": {
          "type": "boolean"
        }
      }
    },
    "VendastaData": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "productNavBarDataUrl": {
          "type": "string"
        }
      }
    },
    "WhiteLabelSettings": {
      "type": "object",
      "properties": {
        "iframeMode": {
          "type": "boolean"
        },
        "enabledChat": {
          "type": "boolean"
        },
        "footerLogo": {
          "type": "string"
        },
        "footerLegalUrl": {
          "type": "string"
        },
        "footerContactUrl": {
          "type": "string"
        },
        "footerTwitterUrl": {
          "type": "string"
        },
        "footerFacebookUrl": {
          "type": "string"
        },
        "footerInstagramUrl": {
          "type": "string"
        },
        "footerTiktokUrl": {
          "type": "string"
        },
        "footerYoutubeUrl": {
          "type": "string"
        },
        "footerPinterestUrl": {
          "type": "string"
        },
        "loginUrl": {
          "type": "string"
        },
        "hideMainMenu": {
          "type": "boolean"
        },
        "showAdsMenu": {
          "type": "boolean"
        },
        "showPlannerMenu": {
          "type": "boolean"
        },
        "showSmartLinksMenu": {
          "type": "boolean"
        },
        "showInboxMenu": {
          "type": "boolean"
        },
        "showEvolutionMenu": {
          "type": "boolean"
        },
        "showReportExample": {
          "type": "boolean"
        },
        "reportExamplePictureUrl": {
          "type": "string"
        },
        "showSubscriptionEmail": {
          "type": "boolean"
        },
        "showMessageBackground": {
          "type": "boolean"
        },
        "hideBrandedContent": {
          "type": "boolean"
        },
        "customizedCssUrl": {
          "type": "string"
        },
        "integratorKey": {
          "type": "string"
        },
        "colors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reportBackgroundUrl": {
          "type": "string"
        },
        "reportBackgroundCoverUrl": {
          "type": "string"
        },
        "enabledReportTemplates": {
          "type": "boolean"
        },
        "customDomainBaseUrl": {
          "type": "string"
        },
        "customSmtpProperties": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "DatasetRequest": {
      "type": "object"
    },
    "DataStudioAd": {
      "type": "object",
      "properties": {
        "adAccount": {
          "type": "string"
        },
        "customEventType": {
          "type": "string"
        },
        "objective": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "providerCampaignId": {
          "type": "string"
        },
        "conversions": {
          "type": "number",
          "format": "double"
        },
        "actions": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          }
        },
        "campaignId": {
          "type": "string"
        },
        "campaignName": {
          "type": "string"
        },
        "adGroupId": {
          "type": "string"
        },
        "adgroupName": {
          "type": "string"
        },
        "adId": {
          "type": "string"
        },
        "adName": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "boostId": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      }
    },
    "JsonOkListResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponseTimelineSeries": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimelineSeries"
          }
        }
      }
    },
    "JsonPaging": {
      "type": "object",
      "properties": {
        "next": {
          "type": "string"
        }
      }
    },
    "SeriesValue": {
      "type": "object",
      "properties": {
        "dateTime": {
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TimelineAggregate": {
      "type": "object",
      "properties": {
        "aggregation": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TimelineSeries": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SeriesValue"
          }
        },
        "aggregate": {
          "$ref": "#/definitions/TimelineAggregate"
        }
      }
    },
    "Hashtag": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "postsCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JsonOkListResponseHashtag": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Hashtag"
          }
        }
      }
    },
    "DistributionItem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponseDistributionItem": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionItem"
          }
        }
      }
    },
    "JsonOkResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "object"
        }
      }
    },
    "JsonOkResponseDouble": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponsePin": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pin"
          }
        }
      }
    },
    "Pin": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "link": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "altText": {
          "type": "string"
        },
        "boardId": {
          "type": "string"
        },
        "boardSectionId": {
          "type": "string"
        },
        "boardOwner": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "saves": {
          "type": "integer",
          "format": "int32"
        },
        "pinClicks": {
          "type": "integer",
          "format": "int32"
        },
        "outboundClicks": {
          "type": "integer",
          "format": "int32"
        },
        "videoMrcViews": {
          "type": "integer",
          "format": "int32"
        },
        "videoAvgWatchTime": {
          "type": "integer",
          "format": "int32"
        },
        "videoV50WatchTime": {
          "type": "number",
          "format": "double"
        },
        "quartile95PercentViews": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "BrandSummaryPost": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "publicationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponseBrandSummaryPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandSummaryPost"
          }
        }
      }
    },
    "Campaign": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "providerCampaignId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["ACTIVE", "PAUSED", "REMOVED"]
        },
        "objective": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "updated": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "start": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "stop": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "dailyBudget": {
          "type": "number",
          "format": "double"
        },
        "lifetimeBudget": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        },
        "biddingStrategyType": {
          "type": "string"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponseCampaign": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Campaign"
          }
        }
      }
    },
    "JsonOkResponseCollectionString": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JsonOkListResponseYoutubeCompetitor": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YoutubeCompetitor"
          }
        }
      }
    },
    "YoutubeCompetitor": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "BlueskyCompetitor": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "screenName": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseBlueskyCompetitor": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlueskyCompetitor"
          }
        }
      }
    },
    "BlueskyPost": {
      "type": "object",
      "properties": {
        "postId": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "published": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "thumbnail": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "replies": {
          "type": "integer",
          "format": "int32"
        },
        "reposts": {
          "type": "integer",
          "format": "int32"
        },
        "quotes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseBlueskyPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlueskyPost"
          }
        }
      }
    },
    "BlueskyEvent": {
      "type": "object",
      "properties": {
        "did": {
          "type": "string"
        },
        "date": {
          "type": "integer",
          "format": "int32"
        },
        "screenName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "profileUrl": {
          "type": "string"
        },
        "followers": {
          "type": "integer",
          "format": "int64"
        },
        "isFollowedByMe": {
          "type": "boolean"
        },
        "isFollowingMe": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseBoolean": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "boolean"
        }
      }
    },
    "Influencer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "provider": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "screenName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "cost": {
          "type": "number",
          "format": "float"
        },
        "favorite": {
          "type": "boolean"
        },
        "costPer1kFollowers": {
          "type": "number",
          "format": "double"
        },
        "costPerInteraction": {
          "type": "number",
          "format": "double"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "followers": {
          "type": "number",
          "format": "double"
        },
        "following": {
          "type": "number",
          "format": "double"
        },
        "posts": {
          "type": "integer",
          "format": "int64"
        },
        "reels": {
          "type": "integer",
          "format": "int64"
        },
        "likes": {
          "type": "number",
          "format": "double"
        },
        "favorites": {
          "type": "number",
          "format": "double"
        },
        "comments": {
          "type": "number",
          "format": "double"
        },
        "reactions": {
          "type": "number",
          "format": "double"
        },
        "shares": {
          "type": "number",
          "format": "double"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "retweets": {
          "type": "number",
          "format": "double"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "dislikes": {
          "type": "number",
          "format": "double"
        },
        "totalViews": {
          "type": "number",
          "format": "double"
        },
        "isDemo": {
          "type": "boolean"
        },
        "clips": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JsonOkResponseInfluencer": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/Influencer"
        }
      }
    },
    "JsonOkListResponseInfluencer": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Influencer"
          }
        }
      }
    },
    "InstagramCompetitorMedia": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer",
          "format": "int64"
        },
        "postId": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "interactions": {
          "type": "integer",
          "format": "int64"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "string"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "filter": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "hashtags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clicks": {
          "type": "number",
          "format": "double"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "reach": {
          "type": "integer",
          "format": "int32"
        },
        "saved": {
          "type": "integer",
          "format": "int32"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "followers": {
          "type": "integer",
          "format": "int64"
        },
        "linkId": {
          "type": "integer",
          "format": "int32"
        },
        "shortUrl": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "reachPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsTotal": {
          "type": "integer",
          "format": "int32"
        },
        "postClicksPaid": {
          "type": "integer",
          "format": "int32"
        },
        "postInteractionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseInstagramCompetitorMedia": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramCompetitorMedia"
          }
        }
      }
    },
    "CompetitorTweet": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "idStr": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "creationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "text": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "favoriteCount": {
          "type": "integer",
          "format": "int32"
        },
        "retweetCount": {
          "type": "integer",
          "format": "int32"
        },
        "linkClicks": {
          "type": "integer",
          "format": "int32"
        },
        "promoted": {
          "type": "boolean"
        },
        "metricsV2": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "userName": {
          "type": "string"
        },
        "screenName": {
          "type": "string"
        },
        "followers": {
          "type": "integer",
          "format": "int64"
        },
        "impressions": {
          "type": "integer",
          "format": "int64"
        },
        "imageUrl": {
          "type": "string"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "type": "string"
        },
        "interactions": {
          "type": "integer",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "picture": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        },
        "hasVideo": {
          "type": "boolean"
        },
        "hasPhoto": {
          "type": "boolean"
        },
        "hasUrls": {
          "type": "boolean"
        },
        "isRetweet": {
          "type": "boolean"
        },
        "inReplyToScreenName": {
          "type": "string"
        },
        "inReplyToStatusIdStr": {
          "type": "string"
        },
        "inReplyToStatusId": {
          "type": "integer",
          "format": "int64"
        },
        "user": {
          "$ref": "#/definitions/TwitterProfile"
        },
        "retweetedStatus": {
          "$ref": "#/definitions/CompetitorTweet"
        },
        "entities": {
          "$ref": "#/definitions/TwitterEntities"
        },
        "extendedEntities": {
          "$ref": "#/definitions/TwitterExtendedEntities"
        },
        "coordinates": {
          "$ref": "#/definitions/TwitterCoordinates"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "retweets": {
          "type": "integer",
          "format": "int32"
        },
        "favorites": {
          "type": "integer",
          "format": "int32"
        },
        "retweet": {
          "type": "boolean"
        },
        "tweetId": {
          "type": "string"
        },
        "hasMedia": {
          "type": "boolean"
        },
        "hasTags": {
          "type": "boolean"
        },
        "lang": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseCompetitorTweet": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompetitorTweet"
          }
        }
      }
    },
    "FacebookCompetitorPost": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string"
        },
        "postId": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "creationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        },
        "link": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "shares": {
          "type": "integer",
          "format": "int32"
        },
        "comments": {
          "type": "integer",
          "format": "int32"
        },
        "reactions": {
          "type": "integer",
          "format": "int32"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUnique": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUniquePaid": {
          "type": "integer",
          "format": "int32"
        },
        "impressionsUniqueOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "clicks": {
          "type": "integer",
          "format": "int32"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "picture": {
          "type": "string"
        },
        "videoViews": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsPaid": {
          "type": "integer",
          "format": "int32"
        },
        "videoViewsOrganic": {
          "type": "integer",
          "format": "int32"
        },
        "videoTimeWatched": {
          "type": "integer",
          "format": "int32"
        },
        "linkclicks": {
          "type": "integer",
          "format": "int32"
        },
        "spend": {
          "type": "number",
          "format": "double"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseFacebookCompetitorPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacebookCompetitorPost"
          }
        }
      }
    },
    "CompetitorTwitchVideo": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "videoUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "createdAtTimestamp": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "game": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "format": "double"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "averageViews": {
          "type": "number",
          "format": "double"
        },
        "clips": {
          "type": "integer",
          "format": "int32"
        },
        "clipId": {
          "type": "string"
        },
        "clipUrl": {
          "type": "string"
        },
        "videoNameForClip": {
          "type": "string"
        },
        "videoUrlForClip": {
          "type": "string"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseCompetitorTwitchVideo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompetitorTwitchVideo"
          }
        }
      }
    },
    "CompetitorTwitchClip": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "clipId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "clipUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "createdAtTimestamp": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "game": {
          "type": "string"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseCompetitorTwitchClip": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompetitorTwitchClip"
          }
        }
      }
    },
    "JsonOkListResponseYouTubeCompetitorVideo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YouTubeCompetitorVideo"
          }
        }
      }
    },
    "YouTubeCompetitorVideo": {
      "type": "object",
      "properties": {
        "videoId": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "publishedAt": {
          "type": "integer",
          "format": "int64"
        },
        "publishedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "views": {
          "type": "number",
          "format": "double"
        },
        "watchMinutes": {
          "type": "number",
          "format": "double"
        },
        "averageViewDuration": {
          "type": "number",
          "format": "double"
        },
        "likes": {
          "type": "number",
          "format": "double"
        },
        "dislikes": {
          "type": "number",
          "format": "double"
        },
        "comments": {
          "type": "number",
          "format": "double"
        },
        "shares": {
          "type": "number",
          "format": "double"
        },
        "estimatedRedPartnerRevenue": {
          "type": "number",
          "format": "double"
        },
        "estimatedAdRevenue": {
          "type": "number",
          "format": "double"
        },
        "adImpressions": {
          "type": "number",
          "format": "double"
        },
        "monetizedPlaybacks": {
          "type": "number",
          "format": "double"
        },
        "ownerScreenName": {
          "type": "string"
        },
        "ownerDisplayName": {
          "type": "string"
        },
        "ownerPicture": {
          "type": "string"
        },
        "channelId": {
          "type": "string"
        },
        "hasRevenueData": {
          "type": "boolean"
        },
        "watchUrl": {
          "type": "string"
        },
        "formattedWatchTime": {
          "type": "string"
        },
        "formattedAvgViewDuration": {
          "type": "string"
        }
      }
    },
    "BlueskyCompetitorPost": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "postId": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "handle": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "published": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "thumbnail": {
          "type": "string"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "replies": {
          "type": "integer",
          "format": "int32"
        },
        "reposts": {
          "type": "integer",
          "format": "int32"
        },
        "quotes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseBlueskyCompetitorPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlueskyCompetitorPost"
          }
        }
      }
    },
    "JsonOkListResponseFacebookPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacebookPost"
          }
        }
      }
    },
    "FacebookReel": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string"
        },
        "reelId": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "description": {
          "type": "string"
        },
        "videoUrl": {
          "type": "string"
        },
        "length": {
          "type": "number",
          "format": "double"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "reelUrl": {
          "type": "string"
        },
        "blueReelsPlayCount": {
          "type": "integer",
          "format": "int32"
        },
        "postImpressionsUnique": {
          "type": "integer",
          "format": "int32"
        },
        "postVideoAvgTimeWatchedSeconds": {
          "type": "number",
          "format": "double"
        },
        "postVideoViewTimeSeconds": {
          "type": "number",
          "format": "double"
        },
        "postVideoReactions": {
          "type": "integer",
          "format": "int32"
        },
        "postVideoSocialActions": {
          "type": "integer",
          "format": "int32"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponseFacebookReel": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacebookReel"
          }
        }
      }
    },
    "FacebookStory": {
      "type": "object",
      "properties": {
        "pageId": {
          "type": "string"
        },
        "storyId": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "mediaType": {
          "type": "string"
        },
        "mediaId": {
          "type": "string"
        },
        "storyUrl": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseFacebookStory": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacebookStory"
          }
        }
      }
    },
    "GbpKeyword": {
      "type": "object",
      "properties": {
        "keyword": {
          "type": "string"
        },
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponseGbpKeyword": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GbpKeyword"
          }
        }
      }
    },
    "HashtagsTrackerSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "hash": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "end": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "createdAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "consolidatedDateTime": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "consolidated": {
          "type": "boolean"
        },
        "scanned": {
          "type": "boolean"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "type": "string"
        },
        "tweetsCount": {
          "type": "integer",
          "format": "int32"
        },
        "igPostsCount": {
          "type": "integer",
          "format": "int32"
        },
        "logo": {
          "type": "string"
        },
        "enabledNetworks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "manualConsolidationTodayCounter": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkResponseHashtagsTrackerSession": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/HashtagsTrackerSession"
        }
      }
    },
    "TrackSessionRequest": {
      "type": "object",
      "required": ["duration", "start"],
      "properties": {
        "start": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "query": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "JsonOkResponsePurchaseDaysResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/PurchaseDaysResponse"
        }
      }
    },
    "PurchaseDaysResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "paymentProvider": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        },
        "numOfDays": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "type": "string"
        },
        "additionalInformationFromProvider": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "PurchaseDaysRequest": {
      "type": "object",
      "required": ["currency", "numOfDays"],
      "properties": {
        "paymentProvider": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        },
        "numOfDays": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseHashtagsTrackerSession": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HashtagsTrackerSession"
          }
        }
      }
    },
    "InstagramHashtag": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "hashtag": {
          "type": "string"
        },
        "impressions": {
          "type": "integer",
          "format": "int32"
        },
        "views": {
          "type": "integer",
          "format": "int32"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "commentsCount": {
          "type": "integer",
          "format": "int32"
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramPost"
          }
        }
      }
    },
    "JsonOkListResponseInstagramHashtag": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramHashtag"
          }
        }
      }
    },
    "JsonOkListResponseInstagramReel": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramReel"
          }
        }
      }
    },
    "JsonOkListResponseInstagramPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramPost"
          }
        }
      }
    },
    "JsonOkListResponseInstagramStory": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramStory"
          }
        }
      }
    },
    "JsonOkListResponseLinkedinPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedinPost"
          }
        }
      }
    },
    "Photo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "photographer": {
          "type": "string"
        },
        "photographerUrl": {
          "type": "string"
        },
        "photographerId": {
          "type": "string"
        },
        "avgColor": {
          "type": "string"
        },
        "src": {
          "$ref": "#/definitions/Src"
        },
        "alt": {
          "type": "string"
        }
      }
    },
    "PhotosSearchResponse": {
      "type": "object",
      "properties": {
        "photos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Photo"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "perPage": {
          "type": "integer",
          "format": "int32"
        },
        "totalResults": {
          "type": "integer",
          "format": "int32"
        },
        "prevPage": {
          "type": "string"
        },
        "nextPage": {
          "type": "string"
        }
      }
    },
    "Src": {
      "type": "object",
      "properties": {
        "original": {
          "type": "string"
        },
        "large": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "small": {
          "type": "string"
        }
      }
    },
    "Video": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "videoFiles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VideoFile"
          }
        }
      }
    },
    "VideoFile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "quality": {
          "type": "string"
        },
        "fileType": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "fps": {
          "type": "number",
          "format": "double"
        },
        "link": {
          "type": "string"
        }
      }
    },
    "VideosSearchResponse": {
      "type": "object",
      "properties": {
        "videos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Video"
          }
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "perPage": {
          "type": "integer",
          "format": "int32"
        },
        "totalResults": {
          "type": "integer",
          "format": "int64"
        },
        "prevPage": {
          "type": "string"
        },
        "nextPage": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseUploadMediaResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/UploadMediaResponse"
        }
      }
    },
    "UploadMediaResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "ChunkOptions": {
      "type": "object",
      "properties": {
        "chunkUrls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 2147483647,
          "minItems": 2
        },
        "hash": {
          "type": "string"
        }
      }
    },
    "MergeMediaRequest": {
      "type": "object",
      "required": ["chunkOptions"],
      "properties": {
        "chunkOptions": {
          "$ref": "#/definitions/ChunkOptions"
        },
        "transformOptions": {
          "$ref": "#/definitions/TransformOptions"
        },
        "folder": {
          "type": "string"
        },
        "mergedFileName": {
          "type": "string"
        },
        "transformEngine": {
          "type": "string"
        }
      }
    },
    "TransformOptions": {
      "type": "object",
      "properties": {
        "sourceFormat": {
          "type": "string"
        },
        "targetFormat": {
          "type": "string"
        },
        "engine": {
          "type": "string"
        }
      }
    },
    "Button": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "boolean"
        },
        "shortener": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "background": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "border": {
          "type": "string"
        }
      }
    },
    "Content": {
      "type": "object",
      "properties": {
        "icons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Icon"
          }
        },
        "buttons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Button"
          }
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "header": {
          "$ref": "#/definitions/Header"
        }
      }
    },
    "Header": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        }
      }
    },
    "Icon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "boolean"
        },
        "shortener": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "icon": {
          "type": "string"
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "boolean"
        },
        "shortener": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "src": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "JsonOkResponseSmartLink": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/SmartLink"
        }
      }
    },
    "SmartLink": {
      "type": "object",
      "properties": {
        "appearance": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/Content"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "free": {
          "type": "boolean"
        }
      }
    },
    "ButtonRow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "button": {
          "$ref": "#/definitions/ContentItem"
        },
        "clicks": {
          "type": "number",
          "format": "double"
        },
        "ctr": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ContentItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "deleted": {
          "type": "boolean"
        },
        "shortener": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        }
      }
    },
    "JsonOkListResponseButtonRow": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ButtonRow"
          }
        }
      }
    },
    "JsonOkResponseString": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "string"
        }
      }
    },
    "ImageRow": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "image": {
          "$ref": "#/definitions/Image"
        },
        "clicks": {
          "type": "number",
          "format": "double"
        },
        "ctr": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponseImageRow": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ImageRow"
          }
        }
      }
    },
    "JsonOkListResponseSmartLink": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SmartLink"
          }
        }
      }
    },
    "JsonOkListResponseThreadsPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ThreadsPost"
          }
        }
      }
    },
    "ThreadsPost": {
      "type": "object",
      "properties": {
        "providerUserId": {
          "type": "string"
        },
        "publishedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "shortCode": {
          "type": "string"
        },
        "isQuotePost": {
          "type": "boolean"
        },
        "permalink": {
          "type": "string"
        },
        "views": {
          "type": "integer",
          "format": "int32"
        },
        "likes": {
          "type": "integer",
          "format": "int32"
        },
        "replies": {
          "type": "integer",
          "format": "int32"
        },
        "reposts": {
          "type": "integer",
          "format": "int32"
        },
        "quotes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseTikTokPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TikTokPost"
          }
        }
      }
    },
    "TikTokPost": {
      "type": "object",
      "properties": {
        "openId": {
          "type": "string"
        },
        "videoId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "createTime": {
          "type": "string",
          "format": "date-time"
        },
        "coverImageUrl": {
          "type": "string"
        },
        "shareUrl": {
          "type": "string"
        },
        "videoDescription": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "embedLink": {
          "type": "string"
        },
        "likeCount": {
          "type": "integer",
          "format": "int32"
        },
        "commentCount": {
          "type": "integer",
          "format": "int32"
        },
        "shareCount": {
          "type": "integer",
          "format": "int32"
        },
        "viewCount": {
          "type": "integer",
          "format": "int64"
        },
        "engagement": {
          "type": "number",
          "format": "double"
        },
        "reach": {
          "type": "integer",
          "format": "int32"
        },
        "fullVideoWatchedRate": {
          "type": "number",
          "format": "double"
        },
        "totalTimeWatched": {
          "type": "number",
          "format": "double"
        },
        "averageTimeWatched": {
          "type": "number",
          "format": "double"
        },
        "impressionSources": {
          "$ref": "#/definitions/TikTokVideoImpressionSources"
        }
      }
    },
    "TikTokVideoImpressionSources": {
      "type": "object",
      "properties": {
        "forYou": {
          "type": "number",
          "format": "double"
        },
        "follow": {
          "type": "number",
          "format": "double"
        },
        "hashtag": {
          "type": "number",
          "format": "double"
        },
        "sound": {
          "type": "number",
          "format": "double"
        },
        "personalProfile": {
          "type": "number",
          "format": "double"
        },
        "search": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "Adgroup": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "campaignId": {
          "type": "string"
        },
        "campaignName": {
          "type": "string"
        },
        "providerAdgroupId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["ACTIVE", "PAUSED", "REMOVED"]
        },
        "dailyBudget": {
          "type": "number",
          "format": "double"
        },
        "lifetimeBudget": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        },
        "biddingStrategyType": {
          "type": "string"
        },
        "maxCPC": {
          "type": "number",
          "format": "double"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponseAdgroup": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Adgroup"
          }
        }
      }
    },
    "JsonOkListResponseAd": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ad"
          }
        }
      }
    },
    "AdPreview": {
      "type": "object",
      "properties": {
        "previewUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseAdPreview": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AdPreview"
        }
      }
    },
    "AdPlatformInfo": {
      "type": "object",
      "required": ["platformId"],
      "properties": {
        "platformId": {
          "type": "string"
        },
        "objective": {
          "type": "string"
        },
        "displaySites": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dsaPayor": {
          "type": "string"
        },
        "dsaBeneficiary": {
          "type": "string"
        },
        "pixel": {
          "type": "string"
        },
        "customEvent": {
          "type": "string"
        }
      }
    },
    "CampaignCreationState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "targetUrl": {
          "type": "string"
        },
        "startDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "endDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "currency": {
          "type": "string"
        },
        "budget": {
          "type": "number"
        },
        "budgetType": {
          "type": "string"
        },
        "bidStrategy": {
          "type": "string"
        },
        "targetCPA": {
          "type": "number"
        },
        "maxCPC": {
          "type": "number"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdPlatformInfo"
          }
        },
        "segmentation": {
          "$ref": "#/definitions/Segmentation"
        },
        "ads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Ad"
          }
        },
        "googleAdsData": {
          "$ref": "#/definitions/GoogleAdsData"
        }
      }
    },
    "GoogleAdsData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "MediaItem": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "width": {
          "type": "string"
        },
        "height": {
          "type": "string"
        }
      }
    },
    "Segmentation": {
      "type": "object",
      "properties": {
        "ageRanges": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gender": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Location"
          }
        }
      }
    },
    "FbAdsAccountData": {
      "type": "object",
      "properties": {
        "currency": {
          "type": "string"
        },
        "defaultDsaBeneficiary": {
          "type": "string"
        },
        "defaultDsaPayer": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseFbAdsAccountData": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/FbAdsAccountData"
        }
      }
    },
    "JsonOkListResponseKeyword": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyword"
          }
        }
      }
    },
    "Keyword": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "composedName": {
          "type": "string"
        },
        "matchType": {
          "type": "string",
          "enum": ["BROAD", "EXACT", "PHRASE", "UNSPECIFIED", "UNKNOWN"]
        },
        "currency": {
          "type": "string"
        },
        "campaignName": {
          "type": "string"
        },
        "adGroupName": {
          "type": "string"
        },
        "qualityScore": {
          "type": "integer",
          "format": "int32"
        },
        "searchScore": {
          "type": "integer",
          "format": "int32"
        },
        "creativityScore": {
          "type": "integer",
          "format": "int32"
        },
        "landingScore": {
          "type": "integer",
          "format": "int32"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "ApplyRecommendationResult": {
      "type": "object",
      "properties": {
        "recommendationId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "detail": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseApplyRecommendationResult": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplyRecommendationResult"
          }
        }
      }
    },
    "AdRecommendation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CAMPAIGN_BUDGET",
            "KEYWORD",
            "TEXT_AD",
            "TARGET_CPA_OPT_IN",
            "MAXIMIZE_CONVERSIONS_OPT_IN",
            "ENHANCED_CPC_OPT_IN",
            "SEARCH_PARTNERS_OPT_IN",
            "MAXIMIZE_CLICKS_OPT_IN",
            "OPTIMIZE_AD_ROTATION",
            "CALLOUT_ASSET",
            "SITELINK_ASSET",
            "CALL_ASSET",
            "USE_BROAD_MATCH_KEYWORD",
            "MOVE_UNUSED_BUDGET"
          ]
        },
        "campaignId": {
          "type": "string"
        },
        "campaignName": {
          "type": "string"
        },
        "dismissed": {
          "type": "boolean"
        },
        "currency": {
          "type": "string"
        },
        "details": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkResponseRecommendationsResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/RecommendationsResponse"
        }
      }
    },
    "RecommendationsResponse": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/Summary"
        },
        "recommendations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdRecommendation"
          }
        }
      }
    },
    "Summary": {
      "type": "object",
      "properties": {
        "numOfRecommendations": {
          "type": "integer",
          "format": "int32"
        },
        "clicks": {
          "type": "number",
          "format": "double"
        },
        "impressions": {
          "type": "number",
          "format": "double"
        },
        "conversions": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkListResponseSuggestedItem": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SuggestedItem"
          }
        }
      }
    },
    "SuggestedItem": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseSuggestedLocation": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SuggestedLocation"
          }
        }
      }
    },
    "SuggestedLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseLanguagesSuggestionResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/LanguagesSuggestionResponse"
        }
      }
    },
    "Language": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "LanguagesSuggestionResponse": {
      "type": "object",
      "properties": {
        "defaultLanguageId": {
          "type": "string"
        },
        "languages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Language"
          }
        }
      }
    },
    "AudienceForecast": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "min": {
          "type": "integer",
          "format": "int64"
        },
        "max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JsonOkListResponseAudienceForecast": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AudienceForecast"
          }
        }
      }
    },
    "JsonOkListResponsePixel": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pixel"
          }
        }
      }
    },
    "Pixel": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AdsCustomEvent": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customEventType": {
          "type": "string"
        },
        "pixelId": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseAdsCustomEvent": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AdsCustomEvent"
          }
        }
      }
    },
    "JsonOkListResponsePlatformCurrency": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PlatformCurrency"
          }
        }
      }
    },
    "PlatformCurrency": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "AgencyTestMailData": {
      "type": "object",
      "properties": {
        "to": {
          "type": "string"
        }
      }
    },
    "AgencyDetailsDto": {
      "type": "object",
      "properties": {
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "agencyLogo": {
          "type": "string"
        },
        "loginLogo": {
          "type": "string"
        },
        "supportChat": {
          "type": "boolean"
        },
        "helpArticles": {
          "type": "boolean"
        },
        "colorPalette": {
          "$ref": "#/definitions/ColorsDto"
        }
      }
    },
    "ColorsDto": {
      "type": "object",
      "properties": {
        "blue": {
          "type": "string"
        },
        "teal": {
          "type": "string"
        },
        "pink": {
          "type": "string"
        },
        "yellow": {
          "type": "string"
        },
        "lightYellow": {
          "type": "string"
        },
        "darkYellow": {
          "type": "string"
        },
        "purple": {
          "type": "string"
        },
        "cyan": {
          "type": "string"
        },
        "red": {
          "type": "string"
        },
        "green": {
          "type": "string"
        },
        "slate": {
          "type": "string"
        },
        "charcoal": {
          "type": "string"
        },
        "cobalt": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseAgencyDetailsDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AgencyDetailsDto"
        }
      }
    },
    "AgencyDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "ownerId": {
          "type": "integer",
          "format": "int32"
        },
        "domain": {
          "type": "string"
        },
        "loginUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "properties": {
          "$ref": "#/definitions/AgencyPropertiesDto"
        }
      }
    },
    "AgencyPropertiesDto": {
      "type": "object",
      "properties": {
        "agencyLogo": {
          "type": "string"
        },
        "loginLogo": {
          "type": "string"
        },
        "supportChat": {
          "type": "boolean"
        },
        "helpArticles": {
          "type": "boolean"
        },
        "colorPalette": {
          "$ref": "#/definitions/ColorsDto"
        },
        "reportLogo": {
          "type": "string"
        },
        "mailMessage": {
          "type": "string"
        },
        "mailReplyTo": {
          "type": "string"
        },
        "mailLogo": {
          "type": "string"
        },
        "smtpConfiguration": {
          "$ref": "#/definitions/CustomSMTPPropertiesDto"
        }
      }
    },
    "CustomSMTPPropertiesDto": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "auth": {
          "type": "string"
        },
        "quitwait": {
          "type": "string"
        },
        "debug": {
          "type": "string"
        },
        "from.label": {
          "type": "string",
          "readOnly": true
        },
        "socketFactory.class": {
          "type": "string",
          "readOnly": true
        },
        "socketFactory.port": {
          "type": "string",
          "readOnly": true
        },
        "starttls.enable": {
          "type": "string",
          "readOnly": true
        },
        "ssl.protocols": {
          "type": "string",
          "readOnly": true
        },
        "ssl.trust": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "JsonOkResponseAgencyDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AgencyDto"
        }
      }
    },
    "AgencyPropertiesForUpdateDto": {
      "type": "object",
      "properties": {
        "agencyLogo": {
          "type": "string"
        },
        "loginLogo": {
          "type": "string"
        },
        "supportChat": {
          "type": "boolean"
        },
        "helpArticles": {
          "type": "boolean"
        },
        "colorPalette": {
          "$ref": "#/definitions/ColorsDto"
        },
        "reportLogo": {
          "type": "string"
        },
        "mailMessage": {
          "type": "string"
        },
        "mailReplyTo": {
          "type": "string"
        },
        "mailLogo": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseAgencyPropertiesForUpdateDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AgencyPropertiesForUpdateDto"
        }
      }
    },
    "AgencyEndClientBrandDto": {
      "type": "object",
      "required": ["brandId", "enabled", "roleId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "endClientId": {
          "type": "integer",
          "format": "int32"
        },
        "brandId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "brandName": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseAgencyEndClientBrandDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgencyEndClientBrandDto"
          }
        }
      }
    },
    "AgencyEndClientActivationLinkRequest": {
      "type": "object",
      "properties": {
        "invitationCustomMessage": {
          "type": "string"
        }
      }
    },
    "AgencyEndClientDto": {
      "type": "object",
      "required": ["agencyId", "id", "username"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastInvitationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgencyEndClientBrandDto"
          }
        }
      }
    },
    "JsonOkListResponseAgencyEndClientDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgencyEndClientDto"
          }
        }
      }
    },
    "JsonOkResponseAgencyEndClientDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AgencyEndClientDto"
        }
      }
    },
    "AgencyEndClientCreationRequest": {
      "type": "object",
      "required": ["endClient"],
      "properties": {
        "endClient": {
          "$ref": "#/definitions/AgencyEndClientForCreationDto"
        },
        "mailMessage": {
          "type": "string"
        }
      }
    },
    "AgencyEndClientForCreationDto": {
      "type": "object",
      "required": ["agencyId", "username"],
      "properties": {
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "lastInvitationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgencyEndClientBrandDto"
          }
        }
      }
    },
    "JsonOkListResponseString": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EmailActivationInfo": {
      "type": "object",
      "required": ["isDefaultEmail"],
      "properties": {
        "isDefaultEmail": {
          "type": "boolean"
        },
        "invitationCustomMessage": {
          "type": "string"
        },
        "useNewActivationLink": {
          "type": "boolean"
        }
      }
    },
    "BrandRoleAssignment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "blogName": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "roleId": {
          "type": "integer",
          "format": "int64"
        },
        "roleName": {
          "type": "string"
        }
      }
    },
    "BrandRoleCollaborator": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "isUserActive": {
          "type": "boolean"
        },
        "lastSent": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandRoleAssignment"
          }
        }
      }
    },
    "JsonOkListResponseBrandRoleCollaborator": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandRoleCollaborator"
          }
        }
      }
    },
    "JsonOkResponseBrandRoleCollaborator": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/BrandRoleCollaborator"
        }
      }
    },
    "BrandRoleAssignmentsRequest": {
      "type": "object",
      "properties": {
        "isDefaultEmail": {
          "type": "boolean"
        },
        "invitationCustomMessage": {
          "type": "string"
        },
        "assignments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandRoleAssignment"
          }
        },
        "useNewActivationLink": {
          "type": "boolean"
        }
      }
    },
    "JsonOkListResponseBrandRoleAssignment": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandRoleAssignment"
          }
        }
      }
    },
    "JsonOkListResponseBrandRole": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandRole"
          }
        }
      }
    },
    "JsonOkResponseBrandRole": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/BrandRole"
        }
      }
    },
    "CreateBrandRoleRequest": {
      "type": "object",
      "required": ["actions"],
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "actions": {
          "$ref": "#/definitions/BrandRoleActions"
        }
      }
    },
    "UpdateBrandRoleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "actions": {
          "$ref": "#/definitions/BrandRoleActions"
        }
      }
    },
    "ChatResponse": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string",
          "example": "8d672794-d321-48d7-82a6-69fa78cebb00",
          "description": "Session identifier for the chat"
        },
        "answer": {
          "type": "string",
          "example": "The answer for your query",
          "description": "Chatbot response answer"
        }
      },
      "description": "Chat response from the chatbot service"
    },
    "ChatRequest": {
      "type": "object",
      "required": ["prompt"],
      "properties": {
        "prompt": {
          "type": "string",
          "example": "Get my brands",
          "description": "User prompt for the chatbot",
          "minLength": 0,
          "maxLength": 1000
        }
      },
      "description": "Chat request containing user prompt"
    },
    "FeatureToggleDto": {
      "type": "object",
      "required": ["enabled", "name", "strategy"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Feature toggle ID"
        },
        "name": {
          "type": "string",
          "example": "new_dashboard",
          "description": "Feature name"
        },
        "description": {
          "type": "string",
          "example": "New dashboard layout",
          "description": "Feature description"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether feature is enabled"
        },
        "strategy": {
          "type": "string",
          "example": "all_users",
          "description": "Strategy for applying feature",
          "enum": ["all_users", "role_based", "whitelist", "beta_users"]
        }
      },
      "description": "Feature toggle configuration"
    },
    "JsonOkListResponseFeatureToggleDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureToggleDto"
          }
        }
      }
    },
    "JsonOkResponseFeatureToggleDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/FeatureToggleDto"
        }
      }
    },
    "CreateFeatureToggleRequest": {
      "type": "object",
      "required": ["enabled", "name", "strategy"],
      "properties": {
        "name": {
          "type": "string",
          "example": "new_dashboard",
          "description": "Feature name"
        },
        "description": {
          "type": "string",
          "example": "New dashboard layout",
          "description": "Feature description"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether feature is enabled"
        },
        "strategy": {
          "type": "string",
          "example": "all_users",
          "description": "Strategy for applying feature",
          "enum": ["all_users", "role_based", "whitelist", "beta_users"]
        }
      },
      "description": "Request to create a new feature toggle"
    },
    "UpdateFeatureToggleRequest": {
      "type": "object",
      "required": ["enabled", "strategy"],
      "properties": {
        "description": {
          "type": "string",
          "example": "Updated dashboard layout",
          "description": "Feature description"
        },
        "enabled": {
          "type": "boolean",
          "example": true,
          "description": "Whether feature is enabled"
        },
        "strategy": {
          "type": "string",
          "example": "all_users",
          "description": "Strategy for applying feature",
          "enum": ["all_users", "role_based", "whitelist", "beta_users"]
        }
      },
      "description": "Request to update an existing feature toggle"
    },
    "Conversation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "self": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "enum": [
            "INSTAGRAM",
            "INSTAGRAMBUSINESS",
            "TWITTER",
            "FACEBOOK",
            "GMB",
            "TIKTOKBUSINESS",
            "YOUTUBE",
            "LINKEDIN"
          ]
        },
        "status": {
          "type": "string",
          "enum": ["PENDING", "READ", "RESOLVED"]
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastReadTime": {
          "type": "string",
          "format": "date-time"
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Participant"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Message"
          }
        }
      }
    },
    "JsonOkListResponseConversation": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Conversation"
          }
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "publicationDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "status": {
          "type": "string",
          "enum": ["NEW", "READ", "DELETED"]
        }
      }
    },
    "Participant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "imageProfileUrl": {
          "type": "string"
        }
      }
    },
    "NewMessageRequest": {
      "type": "object",
      "required": ["provider"],
      "properties": {
        "provider": {
          "type": "string"
        },
        "conversationId": {
          "type": "string"
        },
        "recipient": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        }
      }
    },
    "Authorizations": {
      "type": "object",
      "properties": {
        "missingScopes": {
          "type": "array",
          "description": "List of the scopes needed to make the action. If you already have it, this list will be empty",
          "items": {
            "type": "string"
          }
        },
        "allowAccessToMessages": {
          "type": "boolean",
          "description": "Boolean that says if you has access to post comments feature"
        }
      }
    },
    "JsonOkResponseAuthorizations": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/Authorizations"
        }
      }
    },
    "InboxNote": {
      "type": "object",
      "required": ["contextBlogId", "created", "id", "provider", "userId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "contextBlogId": {
          "type": "integer",
          "format": "int32"
        },
        "participantScreenName": {
          "type": "string"
        },
        "participantAccountId": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "content": {
          "type": "string"
        },
        "updatedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "updated": {
          "type": "boolean"
        },
        "deletedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseInboxNote": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/InboxNote"
        }
      }
    },
    "InboxNoteRequest": {
      "type": "object",
      "properties": {
        "participantScreenName": {
          "type": "string"
        },
        "participantAccountId": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseInboxNote": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InboxNote"
          }
        }
      }
    },
    "ChangeStatusRequest": {
      "type": "object",
      "required": ["conversationType", "provider"],
      "properties": {
        "provider": {
          "type": "string"
        },
        "conversationType": {
          "type": "string"
        },
        "conversationId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "Comment": {
      "type": "object",
      "properties": {
        "parentId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "Element": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/Participant"
        },
        "link": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "mediaUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commentCount": {
          "type": "integer",
          "format": "int32"
        },
        "reactionCount": {
          "type": "integer",
          "format": "int32"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponsePostCommentsThread": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PostCommentsThread"
          }
        }
      }
    },
    "PostCommentsThread": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "self": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "enum": [
            "INSTAGRAM",
            "INSTAGRAMBUSINESS",
            "TWITTER",
            "FACEBOOK",
            "GMB",
            "TIKTOKBUSINESS",
            "YOUTUBE",
            "LINKEDIN"
          ]
        },
        "status": {
          "type": "string",
          "enum": ["PENDING", "READ", "RESOLVED"]
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastReadTime": {
          "type": "string",
          "format": "date-time"
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Participant"
          }
        },
        "root": {
          "$ref": "#/definitions/RootComment"
        }
      }
    },
    "RootComment": {
      "type": "object",
      "properties": {
        "element": {
          "$ref": "#/definitions/Element"
        },
        "id": {
          "type": "string"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "owner": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      }
    },
    "NewCommentRequest": {
      "type": "object",
      "required": ["provider"],
      "properties": {
        "provider": {
          "type": "string"
        },
        "objectId": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        }
      }
    },
    "NewReplyRequest": {
      "type": "object",
      "required": ["provider"],
      "properties": {
        "provider": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "attachment": {
          "type": "string"
        }
      }
    },
    "DeleteReplyRequest": {
      "type": "object",
      "required": ["provider"],
      "properties": {
        "provider": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        }
      }
    },
    "BusinessLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "JsonOkListResponseReview": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Review"
          }
        }
      }
    },
    "Reply": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "updateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Review": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "providerId": {
          "type": "string"
        },
        "self": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "enum": [
            "INSTAGRAM",
            "INSTAGRAMBUSINESS",
            "TWITTER",
            "FACEBOOK",
            "GMB",
            "TIKTOKBUSINESS",
            "YOUTUBE",
            "LINKEDIN"
          ]
        },
        "status": {
          "type": "string",
          "enum": ["PENDING", "READ", "RESOLVED"]
        },
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdateTime": {
          "type": "string",
          "format": "date-time"
        },
        "lastReadTime": {
          "type": "string",
          "format": "date-time"
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Participant"
          }
        },
        "message": {
          "type": "string"
        },
        "stars": {
          "type": "integer",
          "format": "int32"
        },
        "reply": {
          "$ref": "#/definitions/Reply"
        },
        "element": {
          "$ref": "#/definitions/BusinessLocation"
        }
      }
    },
    "JsonOkListResponseLanguageInfo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageInfo"
          }
        }
      }
    },
    "LanguageInfo": {
      "type": "object",
      "required": ["language", "locale"],
      "properties": {
        "locale": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseSocialMediaSystemPromptResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/SocialMediaSystemPromptResponse"
        }
      }
    },
    "SocialMediaSystemPromptResponse": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "prompts": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "JsonOkResponseSystemPromptResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/SystemPromptResponse"
        }
      }
    },
    "SystemPromptResponse": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "prompt": {
          "type": "string"
        }
      }
    },
    "SocialMediaSystemPromptRequest": {
      "type": "object",
      "properties": {
        "promptType": {
          "type": "string"
        },
        "promptText": {
          "type": "string"
        }
      }
    },
    "AssistantMessageResponse": {
      "type": "object",
      "properties": {
        "threadId": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "contentList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "spentCredits": {
          "type": "number",
          "format": "double"
        },
        "userPrompt": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseAssistantMessageResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/AssistantMessageResponse"
        }
      }
    },
    "AssistantMessageRequest": {
      "type": "object",
      "properties": {
        "prompt": {
          "type": "string"
        },
        "imageUrl": {
          "type": "boolean"
        },
        "tone": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "network": {
          "type": "string"
        },
        "instructions": {
          "type": "string"
        }
      }
    },
    "VariantMessageRequest": {
      "type": "object",
      "properties": {
        "userPost": {
          "type": "string"
        },
        "lastPost": {
          "type": "string"
        },
        "extraInstructions": {
          "type": "string"
        }
      }
    },
    "BlogLibraryPostDto": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "blogName": {
          "type": "string"
        },
        "blogPicture": {
          "type": "string"
        },
        "scheduledPostDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "libraryPost": {
          "$ref": "#/definitions/LibraryPostDto"
        }
      }
    },
    "BlueskyConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "postLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FacebookConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "boostBudget": {
          "type": "number"
        },
        "boostPayer": {
          "type": "string"
        },
        "boostBeneficiary": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/LibraryPostLocationDto"
        },
        "type": {
          "type": "string"
        },
        "reelTitle": {
          "type": "string"
        }
      }
    },
    "GbpConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "InstagramCollaboratorTag": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "InstagramConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "carouselTags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LibraryPostPeopleTagDto"
            }
          }
        },
        "carouselProductTags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LibraryPostProductTagDto"
            }
          }
        },
        "type": {
          "type": "string"
        },
        "showReelOnFeed": {
          "type": "boolean"
        },
        "boostBudget": {
          "type": "number"
        },
        "boostPayer": {
          "type": "string"
        },
        "boostBeneficiary": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/LibraryPostLocationDto"
        },
        "reelAudioName": {
          "type": "string"
        },
        "collaborators": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/InstagramCollaboratorTag"
          }
        }
      }
    },
    "JobInfoResponse": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "scheduledStatus": {
          "type": "string"
        },
        "userInstructions": {
          "type": "string"
        },
        "createdDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "finishedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "libraryPostId": {
          "type": "integer",
          "format": "int64"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BlogLibraryPostDto"
          }
        },
        "postsCount": {
          "type": "integer",
          "format": "int32"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseJobInfoResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/JobInfoResponse"
        }
      }
    },
    "LibraryPostCommonConfigurationDto": {
      "type": "object",
      "required": ["content"],
      "properties": {
        "content": {
          "type": "string"
        },
        "firstCommentText": {
          "type": "string"
        },
        "publishMode": {
          "type": "string"
        },
        "smartlinkData": {
          "$ref": "#/definitions/SmartlinkData"
        }
      }
    },
    "LibraryPostDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "creationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "shortener": {
          "type": "boolean"
        },
        "draft": {
          "type": "boolean"
        },
        "commonData": {
          "$ref": "#/definitions/LibraryPostCommonConfigurationDto"
        },
        "media": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryPostMediaDto"
          }
        },
        "saveExternalMediaFiles": {
          "type": "boolean"
        },
        "parentId": {
          "type": "integer",
          "format": "int64"
        },
        "twitterData": {
          "$ref": "#/definitions/TwitterConfigurationDto"
        },
        "facebookData": {
          "$ref": "#/definitions/FacebookConfigurationDto"
        },
        "instagramData": {
          "$ref": "#/definitions/InstagramConfigurationDto"
        },
        "threadsData": {
          "$ref": "#/definitions/ThreadsConfigurationDto"
        },
        "linkedinData": {
          "$ref": "#/definitions/LinkedinConfigurationDto"
        },
        "pinterestData": {
          "$ref": "#/definitions/PinterestConfigurationDto"
        },
        "tiktokData": {
          "$ref": "#/definitions/TikTokConfigurationDto"
        },
        "youtubeData": {
          "$ref": "#/definitions/YoutubeConfigurationDto"
        },
        "gbpData": {
          "$ref": "#/definitions/GbpConfigurationDto"
        },
        "blueskyData": {
          "$ref": "#/definitions/BlueskyConfigurationDto"
        },
        "descendants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryPostDto"
          }
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryPostNoteDto"
          }
        },
        "hasNotReadNotes": {
          "type": "boolean"
        },
        "tags": {
          "type": "string"
        }
      }
    },
    "LibraryPostLocationCoordinates": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "LibraryPostLocationDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "locationCoordinates": {
          "$ref": "#/definitions/LibraryPostLocationCoordinates"
        }
      }
    },
    "LibraryPostMediaDto": {
      "type": "object",
      "required": ["position"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "altText": {
          "type": "string"
        },
        "videoCoverMilliseconds": {
          "type": "integer",
          "format": "int32"
        },
        "videoThumbnailUrl": {
          "type": "string"
        }
      }
    },
    "LibraryPostNoteDto": {
      "type": "object",
      "required": ["created", "id", "libraryPostId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "libraryPostId": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyUserId": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "content": {
          "type": "string"
        },
        "updatedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "updated": {
          "type": "boolean"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "LibraryPostPeopleTagDto": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "LibraryPostProductTagDto": {
      "type": "object",
      "properties": {
        "productName": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "catalogId": {
          "type": "string"
        },
        "position": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LinkedinConfigurationDto": {
      "type": "object",
      "required": ["previewIncluded", "publishImagesAsPDF"],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "documentTitle": {
          "type": "string"
        },
        "publishImagesAsPDF": {
          "type": "boolean"
        },
        "previewIncluded": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "poll": {
          "$ref": "#/definitions/LinkedinPollDto"
        }
      }
    },
    "LinkedinOptionDto": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "LinkedinPollDto": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedinOptionDto"
          }
        },
        "settings": {
          "$ref": "#/definitions/LinkedinSettingsDto"
        }
      }
    },
    "LinkedinSettingsDto": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        }
      }
    },
    "PinterestConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "boardId": {
          "type": "string"
        },
        "pinTitle": {
          "type": "string"
        },
        "pinLink": {
          "type": "string"
        },
        "pinNewFormat": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostTwitterPoll": {
      "type": "object",
      "properties": {
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostTwitterPollOption"
          }
        },
        "settings": {
          "$ref": "#/definitions/ScheduledPostTwitterPollSettings"
        }
      }
    },
    "ScheduledPostTwitterPollOption": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "ScheduledPostTwitterPollSettings": {
      "type": "object",
      "properties": {
        "durationMinutes": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SmartlinkData": {
      "type": "object",
      "properties": {
        "targetUrl": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ThreadsConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "allowedCountryCodes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "replyControl": {
          "type": "string"
        }
      }
    },
    "TikTokConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "disableComment": {
          "type": "boolean"
        },
        "disableDuet": {
          "type": "boolean"
        },
        "disableStitch": {
          "type": "boolean"
        },
        "privacyOption": {
          "type": "string"
        },
        "commercialContentThirdParty": {
          "type": "boolean"
        },
        "commercialContentOwnBrand": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "autoAddMusic": {
          "type": "boolean"
        },
        "photoCoverIndex": {
          "type": "integer",
          "format": "int32"
        },
        "music": {
          "$ref": "#/definitions/TikTokTrackDto"
        }
      }
    },
    "TikTokTrackDto": {
      "type": "object",
      "properties": {
        "musicId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64"
        },
        "startVideoMillis": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TwitterConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "replySettings": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "poll": {
          "$ref": "#/definitions/ScheduledPostTwitterPoll"
        }
      }
    },
    "YoutubeConfigurationDto": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "privacy": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "madeForKids": {
          "type": "boolean"
        },
        "playlistId": {
          "type": "string"
        }
      }
    },
    "JobInfoRequest": {
      "type": "object",
      "properties": {
        "userInstructions": {
          "type": "string"
        },
        "postData": {
          "$ref": "#/definitions/LibraryPostDto"
        }
      }
    },
    "UpdateJobStatusRequest": {
      "type": "object",
      "properties": {
        "fieldName": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseJobInfoResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobInfoResponse"
          }
        }
      }
    },
    "AiScheduledPost": {
      "type": "object",
      "required": ["providers", "publicationDate"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "publicationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderStatus"
          }
        },
        "descendants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AiScheduledPost"
          }
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseNaturalLanguageScheduledPostsDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NaturalLanguageScheduledPostsDto"
          }
        }
      }
    },
    "NaturalLanguageScheduledPostsDto": {
      "type": "object",
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "blogName": {
          "type": "string"
        },
        "blogPicture": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "post": {
          "$ref": "#/definitions/AiScheduledPost"
        }
      }
    },
    "ProviderStatus": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["PUBLISHED", "PUBLISHING", "PENDING", "ERROR", "DRAFT"]
        },
        "publicUrl": {
          "type": "string"
        },
        "detailedStatus": {
          "type": "string"
        }
      }
    },
    "CanvaAssetSummary": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "created_at": {
          "type": "integer",
          "format": "int32"
        },
        "updated_at": {
          "type": "integer",
          "format": "int32"
        },
        "thumbnail": {
          "$ref": "#/definitions/CanvaThumbnail"
        }
      }
    },
    "CanvaDesign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "urls": {
          "$ref": "#/definitions/CanvaDesignLinks"
        },
        "created_at": {
          "type": "integer",
          "format": "int32"
        },
        "updated_at": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "thumbnail": {
          "$ref": "#/definitions/CanvaThumbnail"
        },
        "page_count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CanvaDesignLinks": {
      "type": "object",
      "properties": {
        "edit_url": {
          "type": "string"
        },
        "view_url": {
          "type": "string"
        }
      }
    },
    "CanvaFolder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "created_at": {
          "type": "integer",
          "format": "int32"
        },
        "updated_at": {
          "type": "integer",
          "format": "int32"
        },
        "thumbnail": {
          "$ref": "#/definitions/CanvaThumbnail"
        }
      }
    },
    "CanvaFolderContent": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CanvaFolderItemSummary"
          }
        },
        "continuation": {
          "type": "string"
        }
      }
    },
    "CanvaFolderItemSummary": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "folder": {
          "$ref": "#/definitions/CanvaFolder"
        },
        "design": {
          "$ref": "#/definitions/CanvaDesign"
        },
        "image": {
          "$ref": "#/definitions/CanvaAssetSummary"
        },
        "template": {
          "$ref": "#/definitions/CanvaTemplate"
        }
      }
    },
    "CanvaTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "thumbnails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CanvaThumbnail"
          }
        }
      }
    },
    "CanvaThumbnail": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CanvaUserDesigns": {
      "type": "object",
      "properties": {
        "continuation": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CanvaDesign"
          }
        }
      }
    },
    "CanvaExportError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "CanvaExportJob": {
      "type": "object",
      "properties": {
        "job": {
          "$ref": "#/definitions/CanvaJob"
        }
      }
    },
    "CanvaJob": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "error": {
          "$ref": "#/definitions/CanvaExportError"
        }
      }
    },
    "CanvaExportFormat": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "quality": {
          "type": "string"
        },
        "pages": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "export_quality": {
          "type": "string"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "lossless": {
          "type": "boolean"
        },
        "as_single_image": {
          "type": "boolean"
        },
        "size": {
          "type": "string"
        }
      }
    },
    "CanvaExportRequest": {
      "type": "object",
      "properties": {
        "design_id": {
          "type": "string"
        },
        "format": {
          "$ref": "#/definitions/CanvaExportFormat"
        }
      }
    },
    "CanvaUserProfile": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/CanvaUserProfileProperties"
        }
      }
    },
    "CanvaUserProfileProperties": {
      "type": "object",
      "properties": {
        "display_name": {
          "type": "string"
        }
      }
    },
    "CanvaTeamUserSummary": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "team_id": {
          "type": "string"
        }
      }
    },
    "CanvaUserDetails": {
      "type": "object",
      "properties": {
        "team_user": {
          "$ref": "#/definitions/CanvaTeamUserSummary"
        }
      }
    },
    "DriveFileResponse": {
      "type": "object",
      "properties": {
        "createdTime": {
          "type": "string"
        },
        "iconLink": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "modifiedTime": {
          "type": "string"
        },
        "ownedByMe": {
          "type": "boolean"
        },
        "owners": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DriveUserDetailsResponse"
          }
        },
        "parents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DrivePermissionsResponse"
          }
        },
        "shared": {
          "type": "boolean"
        },
        "webViewLink": {
          "type": "string"
        },
        "webContentLink": {
          "type": "string"
        },
        "thumbnailLink": {
          "type": "string"
        },
        "imageMediaMetadata": {
          "$ref": "#/definitions/ImageMediaMetadataResponse"
        },
        "videoMediaMetadata": {
          "$ref": "#/definitions/VideoMediaMetadataResponse"
        }
      }
    },
    "DrivePermissionsResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "photoLink": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "DriveUserDetailsResponse": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "me": {
          "type": "boolean"
        },
        "permissionId": {
          "type": "string"
        },
        "photoLink": {
          "type": "string"
        }
      }
    },
    "ImageMediaMetadataResponse": {
      "type": "object",
      "properties": {
        "rotation": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VideoMediaMetadataResponse": {
      "type": "object",
      "properties": {
        "durationMillis": {
          "type": "string"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "width": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "DriveResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DriveDrivesRequest": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "pageToken": {
          "type": "string"
        },
        "q": {
          "type": "string"
        },
        "useDomainAdminAccess": {
          "type": "boolean"
        }
      }
    },
    "DriveFileListResponse": {
      "type": "object",
      "properties": {
        "nextPageToken": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DriveFileResponse"
          }
        }
      }
    },
    "DriveFilesRequest": {
      "type": "object",
      "properties": {
        "orderBy": {
          "type": "string"
        },
        "pageToken": {
          "type": "string"
        },
        "pageSize": {
          "type": "integer",
          "format": "int32"
        },
        "q": {
          "type": "string"
        },
        "includeItemsFromAllDrives": {
          "type": "boolean"
        },
        "supportsAllDrives": {
          "type": "boolean"
        }
      }
    },
    "CustomizedUserConfiguration": {
      "type": "object",
      "properties": {
        "embeddedUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseReportConfiguration": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/ReportConfiguration"
        }
      }
    },
    "ReportConfiguration": {
      "type": "object",
      "required": ["blogId", "userId"],
      "properties": {
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "reportType": {
          "type": "string"
        },
        "reportLogo": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "automaticReportDate": {
          "type": "integer",
          "format": "int32"
        },
        "text": {
          "type": "string"
        },
        "subscribe": {
          "type": "boolean"
        },
        "saveMonthlySetup": {
          "type": "boolean"
        },
        "reportParameters": {
          "$ref": "#/definitions/ReportParameters"
        }
      }
    },
    "ReportParameters": {
      "type": "object",
      "properties": {
        "enabledCheckbox": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sections": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SocialMediaParams"
          }
        },
        "language": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        }
      }
    },
    "SocialMediaParams": {
      "type": "object",
      "properties": {
        "rankingField": {
          "type": "string"
        },
        "postsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MailDemoReport": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseReportStatusInfo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/ReportStatusInfo"
        }
      }
    },
    "ReportStatusInfo": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "reportPath": {
          "type": "string"
        }
      }
    },
    "ReportRequest": {
      "type": "object"
    },
    "JsonOkListResponseReportHistoryItem": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportHistoryItem"
          }
        }
      }
    },
    "ReportHistoryItem": {
      "type": "object",
      "properties": {
        "creationDate": {
          "type": "string",
          "format": "date-time"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "rss": {
          "type": "boolean"
        },
        "twitter": {
          "type": "boolean"
        },
        "facebook": {
          "type": "boolean"
        },
        "facebookAds": {
          "type": "boolean"
        },
        "instagram": {
          "type": "boolean"
        },
        "threads": {
          "type": "boolean"
        },
        "bluesky": {
          "type": "boolean"
        },
        "linkedin": {
          "type": "boolean"
        },
        "pinterest": {
          "type": "boolean"
        },
        "tiktok": {
          "type": "boolean"
        },
        "adwords": {
          "type": "boolean"
        },
        "gmb": {
          "type": "boolean"
        },
        "youtube": {
          "type": "boolean"
        },
        "twitch": {
          "type": "boolean"
        },
        "tiktokAds": {
          "type": "boolean"
        },
        "brandSummary": {
          "type": "boolean"
        },
        "reportType": {
          "type": "string"
        },
        "reportFile": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["PENDING", "RUNNING", "RETRYING", "FINISHED", "FAILED"]
        },
        "engineVersion": {
          "type": "string"
        }
      }
    },
    "ApprovalTask": {
      "type": "object",
      "properties": {
        "publicationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "postId": {
          "type": "integer",
          "format": "int32"
        },
        "postUuid": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "blogName": {
          "type": "string"
        },
        "taskType": {
          "type": "string"
        },
        "approvalTaskUsers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalTaskUser"
          }
        }
      }
    },
    "ApprovalTaskUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "mail": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseApprovalTask": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApprovalTask"
          }
        }
      }
    },
    "JsonOkResponseInteger": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkResponseOpenedTasksCount": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/OpenedTasksCount"
        }
      }
    },
    "OpenedTasksCount": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TasksCountDetails"
          }
        }
      }
    },
    "TasksCountDetails": {
      "type": "object"
    },
    "BestTimes": {
      "type": "object",
      "properties": {
        "dayOfWeek": {
          "type": "integer",
          "format": "int32"
        },
        "bestTimesByHour": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BestTimesByHour"
          }
        }
      }
    },
    "BestTimesByHour": {
      "type": "object",
      "properties": {
        "hourOfDay": {
          "type": "integer",
          "format": "int32"
        },
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseBestTimes": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BestTimes"
          }
        }
      }
    },
    "Board": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/BoardOwner"
        },
        "privacy": {
          "type": "string"
        }
      }
    },
    "BoardOwner": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseBoard": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Board"
          }
        }
      }
    },
    "JsonOkResponseBoard": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/Board"
        }
      }
    },
    "IGCatalog": {
      "type": "object",
      "properties": {
        "catalogId": {
          "type": "string"
        },
        "catalogName": {
          "type": "string"
        },
        "shopName": {
          "type": "string"
        },
        "productCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseIGCatalog": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IGCatalog"
          }
        }
      }
    },
    "IGCatalogProduct": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "merchantId": {
          "type": "string"
        },
        "productName": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "retailerId": {
          "type": "string"
        },
        "reviewStatus": {
          "type": "string"
        },
        "isCheckoutFlow": {
          "type": "boolean"
        },
        "productVariants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductVariant"
          }
        }
      }
    },
    "JsonOkListResponseIGCatalogProduct": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IGCatalogProduct"
          }
        }
      }
    },
    "ProductVariant": {
      "type": "object",
      "properties": {
        "productId": {
          "type": "string"
        },
        "variantName": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseListYoutubeVideoCategory": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YoutubeVideoCategory"
          }
        }
      }
    },
    "YoutubeVideoCategory": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseListYoutubePlaylistDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/YoutubePlaylistDto"
          }
        }
      }
    },
    "YoutubePlaylistDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "PLx0sYbCqOb8TBPRdmBHs5Iftvv9TPboYG",
          "description": "Unique identifier of the playlist"
        },
        "title": {
          "type": "string",
          "example": "My channel uploads",
          "description": "Playlist title (human readable)"
        }
      },
      "description": "Represents a YouTube playlist linked to a channel. Contains the playlist id and its human readable title."
    },
    "FacebookRecommendedAudio": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "artist": {
          "type": "string"
        },
        "displayImageUri": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseFacebookRecommendedAudio": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacebookRecommendedAudio"
          }
        }
      }
    },
    "JsonOkResponseTikTokCreatorInfo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/TikTokCreatorInfo"
        }
      }
    },
    "TikTokCreatorInfo": {
      "type": "object",
      "properties": {
        "creatorAvatarUrl": {
          "type": "string"
        },
        "creatorUsername": {
          "type": "string"
        },
        "creatorNickname": {
          "type": "string"
        },
        "privacyLevelOptions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "commentDisabled": {
          "type": "boolean"
        },
        "duetDisabled": {
          "type": "boolean"
        },
        "stitchDisabled": {
          "type": "boolean"
        },
        "maxVideoPostDurationSec": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "JsonOkListResponseTikTokTrendingTrackDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TikTokTrendingTrackDto"
          }
        }
      }
    },
    "TikTokTrendingTrackDto": {
      "type": "object",
      "properties": {
        "commercialMusicId": {
          "type": "string"
        },
        "commercialMusicName": {
          "type": "string"
        },
        "duration": {
          "type": "integer",
          "format": "int32"
        },
        "thumbnailUrl": {
          "type": "string"
        },
        "artist": {
          "type": "string"
        },
        "previewUrl": {
          "type": "string"
        },
        "genres": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rankPosition": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseSchedulerCounters": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/SchedulerCounters"
        }
      }
    },
    "SchedulerCounters": {
      "type": "object",
      "properties": {
        "monthPublishedPostsByUser": {
          "type": "integer",
          "format": "int64"
        },
        "monthPublishedPostsByBrand": {
          "type": "integer",
          "format": "int64"
        },
        "last24HoursPublishedYoutubePostsByBrand": {
          "type": "integer",
          "format": "int64"
        },
        "aiCopiesAttemptsUsedThisMonth": {
          "type": "integer",
          "format": "int64"
        },
        "aiSpentCreditsThisMonth": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "JsonOkResponseResult Information About Added Calendar To A User Or Blog": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/result information about added calendar to a user or blog"
        }
      }
    },
    "result information about added calendar to a user or blog": {
      "type": "object",
      "required": ["calendarId"],
      "properties": {
        "calendarId": {
          "type": "integer",
          "format": "int32",
          "description": "Internal calendar id"
        },
        "aggregationTo": {
          "type": "integer",
          "format": "int32",
          "description": "Blog id, if it is add for a blog"
        },
        "userId": {
          "type": "integer",
          "format": "int32",
          "description": "User id, if it is add for a user"
        }
      }
    },
    "Information about adding a calendar to an user or blog": {
      "type": "object",
      "required": ["aggregationFrom"],
      "properties": {
        "aggregationFrom": {
          "type": "string",
          "description": "Adding for a user or blog"
        }
      }
    },
    "CalendarDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "publicCalendar": {
          "type": "boolean"
        },
        "timeZone": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": ["SYSTEM", "USER"]
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDto"
          }
        }
      }
    },
    "DailyFrecuency": {
      "type": "object",
      "properties": {
        "dayOfWeek": {
          "type": "string",
          "enum": [
            "MONDAY",
            "TUESDAY",
            "WEDNESDAY",
            "THURSDAY",
            "FRIDAY",
            "SATURDAY",
            "SUNDAY"
          ]
        },
        "position": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EventDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "eventInit": {
          "type": "string",
          "format": "date-time"
        },
        "eventEnd": {
          "type": "string",
          "format": "date-time"
        },
        "repeatEvent": {
          "type": "boolean"
        },
        "repeat": {
          "$ref": "#/definitions/RepeatFrequencyDto"
        },
        "dailyEvent": {
          "type": "boolean"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseCalendarDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/CalendarDto"
        }
      }
    },
    "RepeatFrequencyDto": {
      "type": "object",
      "properties": {
        "repeatPattern": {
          "type": "string"
        },
        "frequency": {
          "type": "string",
          "enum": [
            "NANOS",
            "MICROS",
            "MILLIS",
            "SECONDS",
            "MINUTES",
            "HOURS",
            "HALF_DAYS",
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS",
            "DECADES",
            "CENTURIES",
            "MILLENNIA",
            "ERAS",
            "FOREVER"
          ]
        },
        "daysOfWeek": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DailyFrecuency"
          }
        },
        "daysOfMoth": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "interval": {
          "type": "integer",
          "format": "int32"
        },
        "repeatCount": {
          "type": "integer",
          "format": "int32"
        },
        "until": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ICS calendar response data": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1234,
          "description": "Internal calendar Id"
        },
        "url": {
          "type": "string",
          "example": "https://calendar.google.com/calendar/ical/c_very long number.group.calendar.google.com/public/basic.ics",
          "description": "external url to access a public ICS file with this calendar information"
        },
        "name": {
          "type": "string",
          "example": "calendar",
          "description": "Calendar name"
        },
        "description": {
          "type": "string",
          "example": "Description text",
          "description": "Calendar description"
        },
        "publicCalendar": {
          "type": "boolean",
          "example": false,
          "description": "Is this calendar visible to user?"
        },
        "language": {
          "type": "string",
          "description": "Calendar language"
        },
        "type": {
          "type": "string",
          "example": "system",
          "description": "Calendar type",
          "enum": ["system", "user"]
        }
      }
    },
    "JsonOkListResponseICS Calendar Response Data": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ICS calendar response data"
          }
        }
      }
    },
    "JsonOkResponseTwo List With CalendarDTO, User's Calendars And Blog's Calendars": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/two list with CalendarDTO, user's calendars and blog's calendars"
        }
      }
    },
    "two list with CalendarDTO, user's calendars and blog's calendars": {
      "type": "object",
      "properties": {
        "userCalendars": {
          "type": "array",
          "description": "Calendars assigned to current user",
          "items": {
            "$ref": "#/definitions/ICS calendar response data"
          }
        },
        "blogCalendars": {
          "type": "array",
          "description": "Calendars assigned to current blog",
          "items": {
            "$ref": "#/definitions/ICS calendar response data"
          }
        }
      }
    },
    "Response about remove a calendar for an user or blog": {
      "type": "object",
      "required": ["removeFrom"],
      "properties": {
        "removeFrom": {
          "type": "string",
          "description": "Erase calendar for a user or blog"
        }
      }
    },
    "All events in limited time in one calendar": {
      "type": "object",
      "properties": {
        "calendar-id": {
          "type": "integer",
          "format": "int32",
          "description": "Calendar id"
        },
        "calendar-name": {
          "type": "string",
          "description": "Calendar name"
        },
        "start-date": {
          "description": "Start limited time",
          "$ref": "#/definitions/DateTimeInfo"
        },
        "end-date": {
          "description": "End limited time",
          "$ref": "#/definitions/DateTimeInfo"
        },
        "events-all-day": {
          "type": "array",
          "description": "Events all day",
          "items": {
            "$ref": "#/definitions/Atomic event, with init and end one time"
          }
        },
        "events-by-hour": {
          "type": "array",
          "description": "Events with init hour and end hour",
          "items": {
            "$ref": "#/definitions/Atomic event, with init and end one time"
          }
        }
      }
    },
    "Atomic event, with init and end one time": {
      "type": "object",
      "properties": {
        "eventName": {
          "type": "string",
          "description": "Event name"
        },
        "eventDescription": {
          "type": "string",
          "description": "Event description"
        },
        "eventInit": {
          "description": "Event init time",
          "$ref": "#/definitions/DateTimeInfo"
        },
        "eventEnd": {
          "description": "Event ent time",
          "$ref": "#/definitions/DateTimeInfo"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseAll Events In Limited Time In One Calendar": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/All events in limited time in one calendar"
        }
      }
    },
    "JsonOkResponseICS Calendar Response Data": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/ICS calendar response data"
        }
      }
    },
    "ICS calendar request data": {
      "type": "object",
      "required": ["aggregationFrom"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1234,
          "description": "Internal calendar Id"
        },
        "url": {
          "type": "string",
          "example": "https://calendar.google.com/calendar/ical/c_very long number.group.calendar.google.com/public/basic.ics",
          "description": "external url to access a public ICS file with this calendar information"
        },
        "name": {
          "type": "string",
          "example": "calendar",
          "description": "Calendar name"
        },
        "description": {
          "type": "string",
          "example": "Description text",
          "description": "Calendar description"
        },
        "publicCalendar": {
          "type": "boolean",
          "example": false,
          "description": "Is this calendar visible to user?"
        },
        "language": {
          "type": "string",
          "description": "Calendar language"
        },
        "aggregationFrom": {
          "type": "string",
          "description": "Adding for a user or blog"
        }
      }
    },
    "JsonOkResponsePlannerNotificationConfiguration": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/PlannerNotificationConfiguration"
        }
      }
    },
    "PlannerNotificationConfiguration": {
      "type": "object",
      "properties": {
        "notificationType": {
          "type": "string"
        },
        "emailList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserMail"
          }
        },
        "deviceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDevice"
          }
        }
      }
    },
    "UserDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "platform": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "appVersion": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "update": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "UserMail": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "mail": {
          "type": "string"
        }
      }
    },
    "PlannerNotificationConfigurationRequest": {
      "type": "object",
      "required": ["deviceList", "emailList"],
      "properties": {
        "notificationType": {
          "type": "string"
        },
        "emailList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserMailRequest"
          }
        },
        "deviceList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeviceRequest"
          }
        },
        "sendTest": {
          "type": "boolean"
        }
      }
    },
    "UserDeviceRequest": {
      "type": "object",
      "required": ["id", "userId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "UserMailRequest": {
      "type": "object",
      "required": ["blogId", "userId"],
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "mail": {
          "type": "string"
        }
      }
    },
    "ScheduledPostUpdateRequest": {
      "type": "object",
      "required": ["publicationDate"],
      "properties": {
        "publicationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        }
      }
    },
    "JsonOkListResponseScheduledPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPost"
          }
        }
      }
    },
    "ScheduledPost": {
      "type": "object",
      "required": ["providers", "publicationDate", "text"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "publicationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "creationDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "text": {
          "type": "string"
        },
        "firstCommentText": {
          "type": "string"
        },
        "providers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProviderStatus"
          }
        },
        "media": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "autoPublish": {
          "type": "boolean"
        },
        "saveExternalMediaFiles": {
          "type": "boolean"
        },
        "mediaAltText": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shortener": {
          "type": "boolean"
        },
        "draft": {
          "type": "boolean"
        },
        "location": {
          "$ref": "#/definitions/ScheduledPostLocation"
        },
        "videoCoverMilliseconds": {
          "type": "integer",
          "format": "int64"
        },
        "videoThumbnailUrl": {
          "type": "string"
        },
        "parentId": {
          "type": "integer",
          "format": "int32"
        },
        "twitterData": {
          "$ref": "#/definitions/ScheduledPostTwitterData"
        },
        "facebookData": {
          "$ref": "#/definitions/ScheduledPostFacebookData"
        },
        "smartLinkData": {
          "$ref": "#/definitions/ScheduledPostSmartLinkData"
        },
        "instagramData": {
          "$ref": "#/definitions/ScheduledPostInstagramData"
        },
        "pinterestData": {
          "$ref": "#/definitions/ScheduledPostPinterestData"
        },
        "youtubeData": {
          "$ref": "#/definitions/ScheduledPostYoutubeData"
        },
        "tiktokData": {
          "$ref": "#/definitions/ScheduledPostTikTokData"
        },
        "linkedinData": {
          "$ref": "#/definitions/ScheduledPostLinkedinData"
        },
        "autolistData": {
          "$ref": "#/definitions/ScheduledPostAutolistData"
        },
        "brandName": {
          "type": "string"
        },
        "targetBrandId": {
          "type": "integer",
          "format": "int32"
        },
        "gmbData": {
          "$ref": "#/definitions/ScheduledPostGmbData"
        },
        "descendants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPost"
          }
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostNote"
          }
        },
        "hasNotReadNotes": {
          "type": "boolean"
        },
        "uuid": {
          "type": "string"
        },
        "copiedFrom": {
          "type": "string"
        },
        "creatorUserMail": {
          "type": "string"
        },
        "creatorUserId": {
          "type": "integer",
          "format": "int32"
        },
        "creatorAgencyUserMail": {
          "type": "string"
        },
        "creatorAgencyId": {
          "type": "integer",
          "format": "int32"
        },
        "creatorAgencyUserId": {
          "type": "integer",
          "format": "int32"
        },
        "postApprovalData": {
          "$ref": "#/definitions/ScheduledPostApprovalData"
        },
        "threadsData": {
          "$ref": "#/definitions/ScheduledPostThreadsData"
        },
        "blueskyData": {
          "$ref": "#/definitions/ScheduledPostBlueskyData"
        },
        "libraryPostId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScheduledPostApprovalData": {
      "type": "object",
      "required": ["approvalEvents"],
      "properties": {
        "approvalStatus": {
          "type": "string"
        },
        "approvalCriteria": {
          "type": "string"
        },
        "approvalEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostApprovalEvent"
          }
        },
        "sendMailToReviewers": {
          "type": "boolean"
        },
        "saveData": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostApprovalEvent": {
      "type": "object",
      "properties": {
        "postUuid": {
          "type": "string"
        },
        "postId": {
          "type": "integer",
          "format": "int32"
        },
        "reviewerId": {
          "type": "integer",
          "format": "int32"
        },
        "reviewerMail": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updatedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deletedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostAutolistData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ScheduledPostBlueskyData": {
      "type": "object",
      "properties": {
        "postLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScheduledPostFacebookData": {
      "type": "object",
      "properties": {
        "boost": {
          "type": "number",
          "format": "double"
        },
        "boostPayer": {
          "type": "string"
        },
        "boostBeneficiary": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ScheduledPostGmbData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "ScheduledPostImageTag": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostInstagramData": {
      "type": "object",
      "properties": {
        "autoPublish": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostImageTag"
          }
        },
        "productTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostProductTag"
          }
        },
        "carouselTags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ScheduledPostImageTag"
            }
          }
        },
        "carouselProductTags": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ScheduledPostProductTag"
            }
          }
        },
        "type": {
          "type": "string"
        },
        "showReelOnFeed": {
          "type": "boolean"
        },
        "boost": {
          "type": "number",
          "format": "double"
        },
        "boostPayer": {
          "type": "string"
        },
        "boostBeneficiary": {
          "type": "string"
        },
        "audioName": {
          "type": "string"
        },
        "collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramCollaboratorTag"
          }
        }
      }
    },
    "ScheduledPostLinkedinData": {
      "type": "object",
      "properties": {
        "documentTitle": {
          "type": "string"
        },
        "publishImagesAsPDF": {
          "type": "boolean"
        },
        "previewIncluded": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        },
        "poll": {
          "$ref": "#/definitions/ScheduledPostLinkedinPoll"
        }
      }
    },
    "ScheduledPostLinkedinPoll": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostLinkedinPollOption"
          }
        },
        "settings": {
          "$ref": "#/definitions/ScheduledPostLinkedinPollSettings"
        }
      }
    },
    "ScheduledPostLinkedinPollOption": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string"
        }
      }
    },
    "ScheduledPostLinkedinPollSettings": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        }
      }
    },
    "ScheduledPostLocation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/ScheduledPostLocationCoordinates"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostLocationCoordinates": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ScheduledPostNote": {
      "type": "object",
      "required": ["created", "id", "postId"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "postId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "created": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "content": {
          "type": "string"
        },
        "updatedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "updated": {
          "type": "boolean"
        },
        "deletedDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostPinterestData": {
      "type": "object",
      "properties": {
        "boardId": {
          "type": "string"
        },
        "pinTitle": {
          "type": "string"
        },
        "pinLink": {
          "type": "string"
        },
        "pinNewFormat": {
          "type": "boolean"
        }
      }
    },
    "ScheduledPostProductTag": {
      "type": "object",
      "properties": {
        "productName": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "x": {
          "type": "number",
          "format": "double"
        },
        "y": {
          "type": "number",
          "format": "double"
        },
        "catalogId": {
          "type": "string"
        }
      }
    },
    "ScheduledPostSmartLinkData": {
      "type": "object",
      "properties": {
        "targetUrl": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "ScheduledPostThreadsData": {
      "type": "object",
      "properties": {
        "allowedCountryCodes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replyControl": {
          "type": "string"
        }
      }
    },
    "ScheduledPostTikTokData": {
      "type": "object",
      "properties": {
        "disableComment": {
          "type": "boolean"
        },
        "disableDuet": {
          "type": "boolean"
        },
        "disableStitch": {
          "type": "boolean"
        },
        "privacyOption": {
          "type": "string"
        },
        "commercialContentThirdParty": {
          "type": "boolean"
        },
        "commercialContentOwnBrand": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "autoAddMusic": {
          "type": "boolean"
        },
        "photoCoverIndex": {
          "type": "integer",
          "format": "int32"
        },
        "music": {
          "$ref": "#/definitions/ScheduledPostTikTokTrack"
        }
      }
    },
    "ScheduledPostTikTokTrack": {
      "type": "object",
      "properties": {
        "musicId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "startMillis": {
          "type": "integer",
          "format": "int64"
        },
        "durationMillis": {
          "type": "integer",
          "format": "int64"
        },
        "startVideoMillis": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScheduledPostTwitterData": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostImageTag"
          }
        },
        "replySettings": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "poll": {
          "$ref": "#/definitions/ScheduledPostTwitterPoll"
        }
      }
    },
    "ScheduledPostYoutubeData": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "privacy": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string"
        },
        "playlistId": {
          "type": "string"
        },
        "madeForKids": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseScheduledPost": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/ScheduledPost"
        }
      }
    },
    "ScheduledPostApprovalEventRequest": {
      "type": "object",
      "required": ["reviewerId", "status"],
      "properties": {
        "postUuid": {
          "type": "string"
        },
        "reviewerId": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "noteContent": {
          "type": "string"
        }
      }
    },
    "BrandPossibleSchedulerReviewer": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "mail": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        }
      }
    },
    "BrandSchedulerPostApprovalData": {
      "type": "object",
      "required": ["possibleReviewers"],
      "properties": {
        "approvalStatus": {
          "type": "string"
        },
        "approvalCriteria": {
          "type": "string"
        },
        "possibleReviewers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandPossibleSchedulerReviewer"
          }
        },
        "sendMailToReviewers": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseBrandSchedulerPostApprovalData": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/BrandSchedulerPostApprovalData"
        }
      }
    },
    "JsonOkListResponseScheduledPostApprovalDataUpdateResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostApprovalDataUpdateResponse"
          }
        }
      }
    },
    "ScheduledPostApprovalDataUpdateResponse": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        },
        "detail": {
          "type": "object"
        }
      }
    },
    "ScheduledPostApprovalDataInBulk": {
      "type": "object",
      "required": ["approvalData", "posts"],
      "properties": {
        "approvalData": {
          "$ref": "#/definitions/ScheduledPostApprovalData"
        },
        "posts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPost"
          }
        }
      }
    },
    "InstagramAutoPublishProperties": {
      "type": "object",
      "properties": {
        "hasBeenCreator": {
          "type": "boolean"
        },
        "autopublishAllowed": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseInstagramAutoPublishProperties": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/InstagramAutoPublishProperties"
        }
      }
    },
    "JsonOkListResponseScheduledPostEventDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostEventDto"
          }
        }
      }
    },
    "ScheduledPostEventDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "postUuid": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "JsonOkListResponseScheduledPostNote": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduledPostNote"
          }
        }
      }
    },
    "ScheduledPostNoteRequest": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseScheduledPostNote": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/ScheduledPostNote"
        }
      }
    },
    "JsonOkListResponseLibraryPostDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryPostDto"
          }
        }
      }
    },
    "JsonOkResponseLibraryPostDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/LibraryPostDto"
        }
      }
    },
    "JsonOkListResponseLibraryPostEventDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LibraryPostEventDto"
          }
        }
      }
    },
    "LibraryPostEventDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "postId": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyId": {
          "type": "integer",
          "format": "int32"
        },
        "agencyUserId": {
          "type": "integer",
          "format": "int32"
        },
        "userName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "metadata": {
          "type": "object"
        }
      }
    },
    "IpFiltersResponse": {
      "type": "object",
      "properties": {
        "ip": {
          "type": "string"
        },
        "filtered": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseIpFiltersResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/IpFiltersResponse"
        }
      }
    },
    "BrandFeed": {
      "type": "object",
      "properties": {
        "feedUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseBrandFeed": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/BrandFeed"
        }
      }
    },
    "BlueskyData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "Brand": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "ownerUserId": {
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "networksData": {
          "$ref": "#/definitions/NetworksData"
        },
        "isShared": {
          "type": "boolean"
        },
        "ownerUsername": {
          "type": "string"
        },
        "whiteLabelData": {
          "$ref": "#/definitions/WhiteLabelData"
        },
        "hash": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "deleteDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "deleted": {
          "type": "boolean"
        },
        "joinDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "firstConnectionDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "lastResolvedInboxMessageTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "lastReadInboxMessageTimestamp": {
          "type": "integer",
          "format": "int64"
        },
        "timezone": {
          "type": "string"
        },
        "availableConnectors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "brandRole": {
          "$ref": "#/definitions/BrandRole"
        },
        "isDemo": {
          "type": "boolean"
        },
        "properties": {
          "$ref": "#/definitions/BrandProperties"
        }
      }
    },
    "BrandProperties": {
      "type": "object",
      "properties": {
        "customEmail": {
          "type": "string"
        },
        "additionalNotificationAddresses": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "colors": {
          "$ref": "#/definitions/Colors"
        },
        "trialExcluded": {
          "type": "string"
        },
        "engagementRatio": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Colors": {
      "type": "object",
      "properties": {
        "blue": {
          "type": "string"
        },
        "teal": {
          "type": "string"
        },
        "pink": {
          "type": "string"
        },
        "yellow": {
          "type": "string"
        },
        "purple": {
          "type": "string"
        },
        "cyan": {
          "type": "string"
        },
        "red": {
          "type": "string"
        },
        "green": {
          "type": "string"
        },
        "slate": {
          "type": "string"
        },
        "charcoal": {
          "type": "string"
        },
        "lightYellow": {
          "type": "string"
        },
        "darkYellow": {
          "type": "string"
        }
      }
    },
    "FacebookAdsData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "FacebookData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "GbpData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "locationdId": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "profileURL": {
          "type": "string"
        }
      }
    },
    "InstagramData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "connectionType": {
          "type": "string",
          "enum": ["BUSINESS", "FACEBOOK_LOGIN"]
        }
      }
    },
    "JsonOkResponseBrand": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/Brand"
        }
      }
    },
    "LinkedinData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "tokenExpiration": {
          "type": "string"
        },
        "profileURL": {
          "type": "string"
        },
        "accountType": {
          "type": "string",
          "enum": ["BUSINESS", "PERSONAL"]
        }
      }
    },
    "NetworksData": {
      "type": "object",
      "properties": {
        "webData": {
          "$ref": "#/definitions/WebData"
        },
        "facebookData": {
          "$ref": "#/definitions/FacebookData"
        },
        "instagramData": {
          "$ref": "#/definitions/InstagramData"
        },
        "threadsData": {
          "$ref": "#/definitions/ThreadsData"
        },
        "twitterData": {
          "$ref": "#/definitions/TwitterData"
        },
        "blueskyData": {
          "$ref": "#/definitions/BlueskyData"
        },
        "linkedinData": {
          "$ref": "#/definitions/LinkedinData"
        },
        "pinterestData": {
          "$ref": "#/definitions/PinterestData"
        },
        "tiktokData": {
          "$ref": "#/definitions/TikTokData"
        },
        "gbpData": {
          "$ref": "#/definitions/GbpData"
        },
        "youtubeData": {
          "$ref": "#/definitions/YoutubeData"
        },
        "twitchData": {
          "$ref": "#/definitions/TwitchData"
        },
        "facebookAdsData": {
          "$ref": "#/definitions/FacebookAdsData"
        },
        "googleAdsData": {
          "$ref": "#/definitions/GoogleAdsData"
        },
        "tiktokAdsData": {
          "$ref": "#/definitions/TikTokAdsData"
        }
      }
    },
    "PinterestData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "accountType": {
          "type": "string",
          "enum": ["BUSINESS", "PERSONAL"]
        }
      }
    },
    "ThreadsData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "TikTokAdsData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "TikTokData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "accountType": {
          "type": "string",
          "enum": ["BUSINESS", "PERSONAL"]
        },
        "businessTokenExpiration": {
          "type": "string"
        },
        "profileURL": {
          "type": "string"
        }
      }
    },
    "TwitchData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "TwitterData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "hasOAuth2Token": {
          "type": "boolean"
        },
        "twitterSubscriptionType": {
          "type": "string"
        }
      }
    },
    "WebData": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        },
        "feedRss": {
          "type": "string"
        }
      }
    },
    "WhiteLabelData": {
      "type": "object",
      "properties": {
        "whiteLabelLink": {
          "type": "string"
        },
        "analyticModeWhitelabelLink": {
          "type": "string"
        },
        "whiteLabelAlias": {
          "type": "string"
        },
        "isWhiteLabel": {
          "type": "boolean"
        },
        "isWhiteLabelOnlyRead": {
          "type": "boolean"
        }
      }
    },
    "YoutubeData": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "providerUserId": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "BrandLite": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "ownerUserId": {
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "hash": {
          "type": "string"
        },
        "joinDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "firstConnectionDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "timezone": {
          "type": "string"
        },
        "brandRole": {
          "$ref": "#/definitions/BrandRole"
        },
        "engagementRatio": {
          "type": "integer",
          "format": "int32"
        },
        "networksData": {
          "$ref": "#/definitions/NetworksData"
        },
        "isShared": {
          "type": "boolean"
        }
      }
    },
    "JsonOkListResponseBrandLite": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BrandLite"
          }
        }
      }
    },
    "EngagementRatioValue": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BrandProfile": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        }
      }
    },
    "FacebookConnectionRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "InstagramFeedMedia": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        },
        "fbPostId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "publishedAt": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "content": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseInstagramFeedMedia": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstagramFeedMedia"
          }
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "isoCode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isEUCountry": {
          "type": "boolean"
        }
      }
    },
    "JsonOkListResponseCountry": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      }
    },
    "JsonOkListResponseState": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/State"
          }
        }
      }
    },
    "State": {
      "type": "object",
      "properties": {
        "isoCode": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "AvailableNetworks": {
      "type": "object"
    },
    "CreditCardAccount": {
      "type": "object",
      "properties": {
        "creditCardToken": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "brandCard": {
          "type": "string"
        },
        "endCreditNumber": {
          "type": "string"
        },
        "cardExpYear": {
          "type": "integer",
          "format": "int64"
        },
        "cardExpMonth": {
          "type": "integer",
          "format": "int64"
        },
        "selected": {
          "type": "boolean"
        },
        "provider": {
          "type": "string"
        },
        "availableNetworks": {
          "$ref": "#/definitions/AvailableNetworks"
        }
      }
    },
    "JsonOkResponseUserPaymentMethods": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/UserPaymentMethods"
        }
      }
    },
    "PayPalAccount": {
      "type": "object",
      "properties": {
        "payPalToken": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        }
      }
    },
    "UserPaymentMethods": {
      "type": "object",
      "properties": {
        "creditCards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreditCardAccount"
          }
        },
        "payPalAccounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayPalAccount"
          }
        }
      }
    },
    "AddonData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "enum": ["TWITTER"]
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "purchasable": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseSubscription": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "TaxData": {
      "type": "object",
      "properties": {
        "vatRate": {
          "type": "number",
          "format": "double"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "vatNumber": {
          "type": "string"
        },
        "addOn": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseSubscriptionPlan": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionPlan"
          }
        }
      }
    },
    "SubscriptionChangeRequest": {
      "type": "object",
      "required": ["updateOperation"],
      "properties": {
        "updateOperation": {
          "type": "string"
        },
        "couponCode": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "proration": {
          "type": "boolean"
        },
        "currency": {
          "type": "string"
        },
        "provider": {
          "type": "string"
        },
        "paymentMethodToken": {
          "type": "string"
        },
        "addons": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "CreateSubscriptionRequest": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        },
        "paymentMethodToken": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "couponCode": {
          "type": "string"
        },
        "taxData": {
          "$ref": "#/definitions/TaxData"
        },
        "addons": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "SubscriptionCancelRequest": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Coupon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "float"
        },
        "billingCycles": {
          "type": "integer",
          "format": "int32"
        },
        "expiration": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "maxDiscounts": {
          "type": "integer",
          "format": "int32"
        },
        "forNewUsers": {
          "type": "boolean"
        },
        "hashtagsBalance": {
          "type": "integer",
          "format": "int32"
        },
        "ownerId": {
          "type": "integer",
          "format": "int32"
        },
        "label": {
          "type": "string"
        },
        "discountsCount": {
          "type": "integer",
          "format": "int32"
        },
        "revenue": {
          "type": "number",
          "format": "double"
        },
        "creation": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "percentage": {
          "type": "boolean"
        },
        "trial": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "assignedTeamCouponTracking": {
          "type": "string"
        },
        "appliedAt": {
          "$ref": "#/definitions/DateTimeInfo"
        }
      }
    },
    "CouponResult": {
      "type": "object",
      "properties": {
        "finalPriceWithoutTaxes": {
          "type": "number",
          "format": "double"
        },
        "isFreeCoupon": {
          "type": "boolean"
        },
        "coupon": {
          "$ref": "#/definitions/Coupon"
        }
      }
    },
    "JsonOkResponseCouponResult": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/CouponResult"
        }
      }
    },
    "OnboardingData": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "finished": {
          "type": "boolean"
        },
        "buyerPersona": {
          "type": "string"
        },
        "size": {
          "type": "string"
        },
        "goal": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "networks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "partnersOnboardings": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      }
    },
    "JsonOkResponseFloat": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "Application": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseTimezone": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Timezone"
          }
        }
      }
    },
    "Timezone": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseUser": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "DeleteUserRequest": {
      "type": "object",
      "properties": {
        "reasonMessage": {
          "type": "string"
        }
      }
    },
    "UpdateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "accountLogo": {
          "type": "string"
        },
        "headerLogo": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "vatNumber": {
          "type": "string"
        },
        "sendToAlternativeEmail": {
          "type": "boolean"
        },
        "alternativeEmail": {
          "type": "string"
        },
        "marketingNotifications": {
          "type": "boolean"
        },
        "billEmails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "beta": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "onboarding": {
          "$ref": "#/definitions/OnboardingData"
        },
        "firstDayOfTheWeek": {
          "type": "string"
        },
        "whiteLabelIntegrator": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseUserCredentials": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/UserCredentials"
        }
      }
    },
    "UserCredentials": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        }
      }
    },
    "UpdateUserCredentialsRequest": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "recoveryToken": {
          "type": "string"
        }
      }
    },
    "JsonOkResponseSavedText": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/SavedText"
        }
      }
    },
    "SavedText": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "SavedTextRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseSavedTextWithPermissions": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SavedTextWithPermissions"
          }
        }
      }
    },
    "SavedTextWithPermissions": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "blogId": {
          "type": "integer",
          "format": "int32"
        },
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "canDelete": {
          "type": "boolean"
        },
        "canEdit": {
          "type": "boolean"
        }
      }
    },
    "JsonOkListResponseStTagCount": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StTagCount"
          }
        }
      }
    },
    "StTagCount": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        },
        "tagCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RecoveryChangeRequest": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "ApiConsumptionData": {
      "type": "object"
    },
    "JsonOkListResponseApiConsumptionData": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiConsumptionData"
          }
        }
      }
    },
    "JsonOkResponseTrialEligibilityResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/TrialEligibilityResponse"
        }
      }
    },
    "TrialEligibilityResponse": {
      "type": "object",
      "properties": {
        "eligible": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseTrialInfoResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/TrialInfoResponse"
        }
      }
    },
    "TrialInfoResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "integer",
          "format": "int32"
        },
        "startDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "endDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "pageId": {
          "type": "string"
        },
        "pageName": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "JsonOkResponseLoginInfo": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "$ref": "#/definitions/LoginInfo"
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "loginUrl": {
          "type": "string"
        }
      }
    },
    "JsonOkListResponseLegalTermDto": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object"
        },
        "page": {
          "$ref": "#/definitions/JsonPaging"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LegalTermDto"
          }
        }
      }
    },
    "LegalTermDto": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "versionDate": {
          "$ref": "#/definitions/DateTimeInfo"
        },
        "description": {
          "type": "string"
        },
        "acceptanceDeadline": {
          "$ref": "#/definitions/DateTimeInfo"
        }
      }
    },
    "ContractEventRequest": {
      "type": "object",
      "properties": {
        "event": {
          "type": "string"
        }
      }
    }
  }
}
